## Jump/Call to 32-bit Immediate (Jump32)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 1 | 0 | 1 | 1 | 1 |.c.| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |rel|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## |.............................immH..............................|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## |.............................immL..............................|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## |.........................happyToBeHere.........................|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token jmpInstr16 (16)
	jmpSig           = (10,15) 
	jmpC             = ( 9, 9) 
	jmpMask8z        = ( 1, 8) 
	jmpRel           = ( 0, 0) 
;

define token jmpInstr32 (16)
	jmpUImmH         = ( 0,15) 
	jmpSImmH         = ( 0,15) signed
;

define token jmpInstr48 (16)
	jmpImmL          = ( 0,15) 
;

define token jmpInstr64 (16)
	jmpZeros         = ( 0,15) 
;


### Instructions ###

jmpImm:  addr is jmpSImmH ; jmpImmL [addr = inst_start + (jmpSImmH << 16 | jmpImmL);]{ export *[ram]:4 addr; }
jmpImmA: addr is jmpUImmH ; jmpImmL [addr = jmpUImmH << 16 | jmpImmL;]{ export *[ram]:4 addr; }

with Jump32: (jmpSig=0x37 & jmpMask8z=0x0) ... {
: "JumpAbs" "JUMP.A" jmpImmA is jmpC=0x0 & jmpRel=0x0 ; jmpImmA ; jmpZeros=0x0 { goto jmpImmA; }
: "JumpAbs" "JUMP" jmpImm    is jmpC=0x0 & jmpRel=0x1 ; jmpImm ; jmpZeros=0x0  { goto jmpImm; }

: "Call" "CALL.A" jmpImmA is jmpC=0x1 & jmpRel=0x0 ; jmpImmA ; jmpZeros=0x0 { RETS = inst_next; goto jmpImmA; }
: "Call" "CALL" jmpImm    is jmpC=0x1 & jmpRel=0x1 ; jmpImm ; jmpZeros=0x0  { RETS = inst_next; goto jmpImm; }
}


:^Jump32 is Jump32 { build Jump32; }
