######################################################################
########>--------        16 bits instructions        --------<########
############################## MAIN_16A ##############################


## 16-bit Slot Nop (NOP16)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

:NOP is opcode16=0x0000 {}


## Basic Program Sequencer Control Functions (ProgCtrl)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |.opc...........|.reg...........|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

define pcodeop idle;
define pcodeop csync;
define pcodeop ssync;
define pcodeop emuexcpt;
define pcodeop raise;
define pcodeop excpt;

with returnDesc : pgcOpc=0x1{
: "RTS" is pgcReg=0x0 { return [RETS]; }
: "RTI" is pgcReg=0x1 { return [RETI]; }
: "RTX" is pgcReg=0x2 { return [RETX]; }
: "RTN" is pgcReg=0x3 { return [RETN]; }
: "RTE" is pgcReg=0x4 { return [RETE]; }
}

with syncDesc : pgcOpc=0x2{
: "IDLE"  is pgcReg=0x0 { idle(); }
: "CSYNC" is pgcReg=0x3 { csync(); }
: "SSYNC" is pgcReg=0x4 { ssync(); }
}

modeDesc: "EMUEXCPT" is pgcOpc=0x2 & pgcReg=0x5 { emuexcpt(); }

with : opcode08=0x00 {
:Return returnDesc is returnDesc { build returnDesc; }
:Sync   syncDesc   is syncDesc { build syncDesc; }
:Mode   modeDesc   is modeDesc { build modeDesc; }

with : pgcReg1=0x0 {
:IMaskMv "CLI" pgcDReg           is pgcOpc=0x3 & pgcDReg {
    local imaskAddr:4 = $(IMASK);
    pgcDReg = *[ram]:4 imaskAddr;
    *[ram]:4 imaskAddr = 0;
}
:IMaskMv "STI" pgcDReg           is pgcOpc=0x4 & pgcDReg {
    local imaskAddr:4 = $(IMASK);
    *[ram]:4 imaskAddr = pgcDReg;
}
:Jump    "JUMP" (pgcPReg)        is pgcOpc=0x5 & pgcPReg { goto [pgcPReg]; }
:Call    "CALL" (pgcPReg)        is pgcOpc=0x6 & pgcPReg { RETS = inst_next; call [pgcPReg]; }
:Call    "CALL" ("PC" + pgcPReg) is pgcOpc=0x7 & pgcPReg { RETS = inst_next; call [PC + pgcPReg]; }
:Jump    "JUMP" ("PC" + pgcPReg) is pgcOpc=0x8 & pgcPReg { goto [PC + pgcPReg]; }
:TestSet "TESTSET" (pgcPReg)     is pgcOpc=0xb & pgcPReg {
    local testVal = *[ram]:1 pgcPReg;
    CC = 0x0;
    if (testVal != 0x00) goto <is_set>;
    CC = 0x1;
    <is_set>
    *[ram]:1 pgcPReg = testVal | 0x80;
}
:Sync    "STI IDLE" pgcDReg      is pgcOpc=0xc & pgcDReg {
    local imaskAddr:4 = $(IMASK);
    *[ram]:4 imaskAddr = pgcDReg;
    idle();
}
}

:Raise "RAISE" pgcReg is pgcOpc=0x9 & pgcReg { raise(pgcReg:1); }
:Raise "EXCPT" pgcReg is pgcOpc=0xa & pgcReg { excpt(pgcReg:1); }
}


## Push or Pop register, to and from the stack pointed to by sp (PushPopReg)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |.w.|.grp.......|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

PUSHREG: pprDReg    is pprGrp=0x0 & pprDReg { push(pprDReg); } 
PUSHREG: pprPReg    is pprGrp=0x1 & pprPReg { push(pprPReg); } 
PUSHREG: pprIReg    is pprGrp=0x2 & pprReg1=0x0 & pprIReg { push(pprIReg); } 
PUSHREG: pprMReg    is pprGrp=0x2 & pprReg1=0x1 & pprMReg { push(pprMReg); } 
PUSHREG: pprBReg    is pprGrp=0x3 & pprReg1=0x0 & pprBReg { push(pprBReg); } 
PUSHREG: pprLReg    is pprGrp=0x3 & pprReg1=0x1 & pprLReg { push(pprLReg); } 
PUSHREG: "A0.X"     is pprGrp=0x4 & pprAccReg=0x0 { push(A0.X); } 
PUSHREG: "A0.W"     is pprGrp=0x4 & pprAccReg=0x1 { push(A0.W); } 
PUSHREG: "A1.X"     is pprGrp=0x4 & pprAccReg=0x2 { push(A1.X); } 
PUSHREG: "A1.W"     is pprGrp=0x4 & pprAccReg=0x3 { push(A1.W); } 
PUSHREG: "ASTAT"    is pprGrp=0x4 & pprAccReg=0x6 { push(ASTAT); } 
PUSHREG: "RETS"     is pprGrp=0x4 & pprAccReg=0x7 { push(RETS); } 
PUSHREG: pprSysReg2 is pprGrp=0x6 & pprSysReg2 { push(pprSysReg2); } 
PUSHREG: pprSysReg3 is pprGrp=0x7 & pprSysReg3 { push(pprSysReg3); } 

POPREG: pprDReg    is pprGrp=0x0 & pprDReg { pop(pprDReg); } 
POPREG: pprPReg    is pprGrp=0x1 & pprPReg { pop(pprPReg); } 
POPREG: pprIReg    is pprGrp=0x2 & pprReg1=0x0 & pprIReg { pop(pprIReg); } 
POPREG: pprMReg    is pprGrp=0x2 & pprReg1=0x1 & pprMReg { pop(pprMReg); } 
POPREG: pprBReg    is pprGrp=0x3 & pprReg1=0x0 & pprBReg { pop(pprBReg); } 
POPREG: pprLReg    is pprGrp=0x3 & pprReg1=0x1 & pprLReg { pop(pprLReg); } 
POPREG: "A0.X"     is pprGrp=0x4 & pprAccReg=0x0 { pop(A0.X); } 
POPREG: "A0.W"     is pprGrp=0x4 & pprAccReg=0x1 { pop(A0.W); } 
POPREG: "A1.X"     is pprGrp=0x4 & pprAccReg=0x2 { pop(A1.X); } 
POPREG: "A1.W"     is pprGrp=0x4 & pprAccReg=0x3 { pop(A1.W); } 
POPREG: "ASTAT"    is pprGrp=0x4 & pprAccReg=0x6 { pop(ASTAT); } 
POPREG: "RETS"     is pprGrp=0x4 & pprAccReg=0x7 { pop(RETS); } 
POPREG: pprSysReg2 is pprGrp=0x6 & pprSysReg2 { pop(pprSysReg2); } 
POPREG: pprSysReg3 is pprGrp=0x7 & pprSysReg3 { pop(pprSysReg3); } 

with : opcode09=0x002 {
:Pop  POPREG = "[SP++]" is pprW=0x0 & POPREG { build POPREG; }
:Push "[--SP]" = PUSHREG is pprW=0x1 & PUSHREG { build PUSHREG; }
}


## Move CC conditional bit, to and from Dreg (CC2Dreg)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 |.opc...|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

mvtoccDesc: "CC = !CC" is epsilon {}

with : opcode11=0x010 {
:CCToDreg cc2dregReg = "CC"  is cc2dregOpc=0x0 & cc2dregReg { cc2dregReg = zext(CC); }
:MvToCC   "CC" = cc2dregReg  is cc2dregOpc=0x1 & cc2dregReg { CC = (cc2dregReg != 0); }
:CCToDreg cc2dregReg = "!CC" is cc2dregOpc=0x2 & cc2dregReg { cc2dregReg = zext(!CC); }
:MvToCC   mvtoccDesc         is cc2dregOpc=0x3 & mvtoccDesc { CC = !CC; }
}


## Cache Control (CacheCtrl)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 |.a.|.opc...|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

define pcodeop prefetch;
define pcodeop flushinv;
define pcodeop flush;
define pcodeop iflush;

PREGA: cctrlReg   is cctrlA=0x0 & cctrlReg { export cctrlReg; }
PREGA: cctrlReg++ is cctrlA=0x1 & cctrlReg {
    local prevVal:4 = cctrlReg;
    # Increment by cache line length = 64 bits * 4 = 32 bytes
    cctrlReg = cctrlReg + 0x20; 
    export prevVal;
}

with : opcode10=0x009 {
:CacheCtrl "PREFETCH" [PREGA] is cctrlOpc=0x0 & PREGA { prefetch(PREGA); }
:CacheCtrl "FLUSHINV" [PREGA] is cctrlOpc=0x1 & PREGA { flushinv(PREGA); }
:CacheCtrl "FLUSH" [PREGA]    is cctrlOpc=0x2 & PREGA { flush(PREGA); }
:CacheCtrl "IFLUSH" [PREGA]   is cctrlOpc=0x3 & PREGA { iflush(PREGA); }
}


## Copy CC conditional bit, from status (CC2Stat)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 |.d.|.op....|.cbit..............|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode08=0x03 {
:MvToCC_STAT "CC =" cc2statCbit  is cc2statD=0x0 & cc2statOp=0x0 & cc2statCbit { 
    local bitVal:1; 
    getAstat(cc2statCbit, bitVal); 
    CC = bitVal; 
}
:MvToCC_STAT "CC |=" cc2statCbit is cc2statD=0x0 & cc2statOp=0x1 & cc2statCbit { 
    local bitVal:1; 
    getAstat(cc2statCbit, bitVal); 
    CC = CC || bitVal; 
}
:MvToCC_STAT "CC &=" cc2statCbit is cc2statD=0x0 & cc2statOp=0x2 & cc2statCbit { 
    local bitVal:1; 
    getAstat(cc2statCbit, bitVal); 
    CC = CC && bitVal; 
}
:MvToCC_STAT "CC ^=" cc2statCbit is cc2statD=0x0 & cc2statOp=0x3 & cc2statCbit { 
    local bitVal:1; 
    getAstat(cc2statCbit, bitVal); 
    CC = CC ^^ bitVal; 
}

:CCToStat16  cc2statCbit "= CC"  is cc2statD=0x1 & cc2statOp=0x0 & cc2statCbit { 
    local ccVal:1 = CC; 
    local flag:4 = zext(ccVal) << cc2statCbit;
    local mask:4 = 0x00000001 << cc2statCbit;
    ASTAT = ASTAT & ~mask;
    ASTAT = ASTAT | flag;
}
:CCToStat16  cc2statCbit "|= CC" is cc2statD=0x1 & cc2statOp=0x1 & cc2statCbit { 
    local ccVal:1 = CC; 
    local flag:4 = zext(ccVal) << cc2statCbit;
    ASTAT = ASTAT | flag;
}
:CCToStat16  cc2statCbit "&= CC" is cc2statD=0x1 & cc2statOp=0x2 & cc2statCbit { 
    local ccVal:1 = CC; 
    local flag:4 = zext(ccVal == 0x00) << cc2statCbit;
    ASTAT = ASTAT & ~flag;
}
:CCToStat16  cc2statCbit "^= CC" is cc2statD=0x1 & cc2statOp=0x3 & cc2statCbit { 
    local ccVal:1 = CC; 
    local flag:4 = zext(ccVal) << cc2statCbit;
    ASTAT = ASTAT ^ flag;
}
}


## Push or Pop Multiple contiguous registers (PushPopMult)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 1 | 0 |.d.|.p.|.w.|.dr........|.pr........|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

PregRngPush: "P5:0" is ppmPr=0x0 { push(P0); push(P1); push(P2); push(P3); push(P4); push(P5); }
PregRngPush: "P5:1" is ppmPr=0x1 {           push(P1); push(P2); push(P3); push(P4); push(P5); }
PregRngPush: "P5:2" is ppmPr=0x2 {                     push(P2); push(P3); push(P4); push(P5); }
PregRngPush: "P5:3" is ppmPr=0x3 {                               push(P3); push(P4); push(P5); }
PregRngPush: "P5:4" is ppmPr=0x4 {                                         push(P4); push(P5); }
PregRngPush: "P5:5" is ppmPr=0x5 {                                                   push(P5); }

DregRngPush: "R7:0" is ppmDr=0x0 { push(R0); push(R1); push(R2); push(R3); push(R4); push(R5); push(R6); push(R7); }
DregRngPush: "R7:1" is ppmDr=0x1 {           push(R1); push(R2); push(R3); push(R4); push(R5); push(R6); push(R7); }
DregRngPush: "R7:2" is ppmDr=0x2 {                     push(R2); push(R3); push(R4); push(R5); push(R6); push(R7); }
DregRngPush: "R7:3" is ppmDr=0x3 {                               push(R3); push(R4); push(R5); push(R6); push(R7); }
DregRngPush: "R7:4" is ppmDr=0x4 {                                         push(R4); push(R5); push(R6); push(R7); }
DregRngPush: "R7:5" is ppmDr=0x5 {                                                   push(R5); push(R6); push(R7); }
DregRngPush: "R7:6" is ppmDr=0x6 {                                                             push(R6); push(R7); }
DregRngPush: "R7:7" is ppmDr=0x7 {                                                                       push(R7); }

PregRngPop: "P5:0" is ppmPr=0x0 { pop(P5); pop(P4); pop(P3); pop(P2); pop(P1); pop(P0); }
PregRngPop: "P5:1" is ppmPr=0x1 { pop(P5); pop(P4); pop(P3); pop(P2); pop(P1);          }
PregRngPop: "P5:2" is ppmPr=0x2 { pop(P5); pop(P4); pop(P3); pop(P2);                   }
PregRngPop: "P5:3" is ppmPr=0x3 { pop(P5); pop(P4); pop(P3);                            }
PregRngPop: "P5:4" is ppmPr=0x4 { pop(P5); pop(P4);                                     }
PregRngPop: "P5:5" is ppmPr=0x5 { pop(P5);                                              }

DregRngPop: "R7:0" is ppmDr=0x0 { pop(R7); pop(R6); pop(R5); pop(R4); pop(R3); pop(R2); pop(R1); pop(R0); }
DregRngPop: "R7:1" is ppmDr=0x1 { pop(R7); pop(R6); pop(R5); pop(R4); pop(R3); pop(R2); pop(R1);          }
DregRngPop: "R7:2" is ppmDr=0x2 { pop(R7); pop(R6); pop(R5); pop(R4); pop(R3); pop(R2);                   }
DregRngPop: "R7:3" is ppmDr=0x3 { pop(R7); pop(R6); pop(R5); pop(R4); pop(R3);                            }
DregRngPop: "R7:4" is ppmDr=0x4 { pop(R7); pop(R6); pop(R5); pop(R4);                                     }
DregRngPop: "R7:5" is ppmDr=0x5 { pop(R7); pop(R6); pop(R5);                                              }
DregRngPop: "R7:6" is ppmDr=0x6 { pop(R7); pop(R6);                                                       }
DregRngPop: "R7:7" is ppmDr=0x7 { pop(R7);                                                                }

with : opcode07=0x02 {
with : ppmW=0x0 {
:PushPopMul16 (PregRngPop) = "[SP++]"             is ppmD=0x0 & ppmP=0x1 & PregRngPop { build PregRngPop; }
:PushPopMul16 (DregRngPop) = "[SP++]"             is ppmD=0x1 & ppmP=0x0 & DregRngPop { build DregRngPop; }
:PushPopMul16 (DregRngPop, PregRngPop) = "[SP++]" is ppmD=0x1 & ppmP=0x1 & DregRngPop & PregRngPop {
    build PregRngPop;
    build DregRngPop;
}
}

with : ppmW=0x1 {
:PushPopMul16 "[--SP]" = (PregRngPush)              is ppmD=0x0 & ppmP=0x1 & PregRngPush { build PregRngPush; }
:PushPopMul16 "[--SP]" = (DregRngPush)              is ppmD=0x1 & ppmP=0x0 & DregRngPush { build DregRngPush; }
:PushPopMul16 "[--SP]" = (DregRngPush, PregRngPush) is ppmD=0x1 & ppmP=0x1 & DregRngPush & PregRngPush {
    build DregRngPush;
    build PregRngPush;
}
}
}


## Conditional Move (CCMV)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 1 | 1 |.t.|.d.|.s.|.dst.......|.src.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

GDST: ccmvDstDreg is ccmvD=0x0 & ccmvDstDreg { export ccmvDstDreg; }
GDST: ccmvDstPreg is ccmvD=0x1 & ccmvDstPreg { export ccmvDstPreg; }

GSRC: ccmvSrcDreg is ccmvS=0x0 & ccmvSrcDreg { export ccmvSrcDreg; }
GSRC: ccmvSrcPreg is ccmvS=0x1 & ccmvSrcPreg { export ccmvSrcPreg; }

with : opcode07=0x03 {
:MvRegToRegCond "if !CC" GDST = GSRC is ccmvT=0x0 & GDST & GSRC {
    if (CC) goto <do_nothing>;
    GDST = GSRC;
<do_nothing>
}
:MvRegToRegCond "if CC" GDST = GSRC  is ccmvT=0x1 & GDST & GSRC {
    if (!CC) goto <do_nothing>;
    GDST = GSRC;
<do_nothing>
}
}


## Set CC conditional bit (CCFlag)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 1 |.i.|.opc.......|.g.|.x.........|.y.........|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode05=0x01 {
with : ccflagOpc=0x0 {
:CompRegisters "CC =" ccflagXDreg "==" ccflagYDreg is ccflagI=0x0 & ccflagG=0x0 & ccflagXDreg & ccflagYDreg { 
    CC = (ccflagXDreg == ccflagYDreg);
}
:CompRegisters "CC =" ccflagXDreg "==" ccflagYImm  is ccflagI=0x1 & ccflagG=0x0 & ccflagXDreg & ccflagYImm { 
    CC = (ccflagXDreg == ccflagYImm);
}
:CCFlagP       "CC =" ccflagXPreg "==" ccflagYPreg is ccflagI=0x0 & ccflagG=0x1 & ccflagXPreg & ccflagYPreg { 
    CC = (ccflagXPreg == ccflagYPreg);
}
:CCFlagP       "CC =" ccflagXPreg "==" ccflagYImm  is ccflagI=0x1 & ccflagG=0x1 & ccflagXPreg & ccflagYImm { 
    CC = (ccflagXPreg == ccflagYImm);
}
}

with : ccflagOpc=0x1 {
:CompRegisters "CC =" ccflagXDreg < ccflagYDreg is ccflagI=0x0 & ccflagG=0x0 & ccflagXDreg & ccflagYDreg { 
    CC = (ccflagXDreg s< ccflagYDreg);
}
:CompRegisters "CC =" ccflagXDreg < ccflagYImm  is ccflagI=0x1 & ccflagG=0x0 & ccflagXDreg & ccflagYImm { 
    CC = (ccflagXDreg s< ccflagYImm);
}
:CCFlagP       "CC =" ccflagXPreg < ccflagYPreg is ccflagI=0x0 & ccflagG=0x1 & ccflagXPreg & ccflagYPreg { 
    CC = (ccflagXPreg s< ccflagYPreg);
}
:CCFlagP       "CC =" ccflagXPreg < ccflagYImm  is ccflagI=0x1 & ccflagG=0x1 & ccflagXPreg & ccflagYImm { 
    CC = (ccflagXPreg s< ccflagYImm);
}
}

with : ccflagOpc=0x2 {
:CompRegisters "CC =" ccflagXDreg "<=" ccflagYDreg is ccflagI=0x0 & ccflagG=0x0 & ccflagXDreg & ccflagYDreg { 
    CC = (ccflagXDreg s<= ccflagYDreg);
}
:CompRegisters "CC =" ccflagXDreg "<=" ccflagYImm  is ccflagI=0x1 & ccflagG=0x0 & ccflagXDreg & ccflagYImm { 
    CC = (ccflagXDreg s<= ccflagYImm);
}
:CCFlagP       "CC =" ccflagXPreg "<=" ccflagYPreg is ccflagI=0x0 & ccflagG=0x1 & ccflagXPreg & ccflagYPreg { 
    CC = (ccflagXPreg s<= ccflagYPreg);
}
:CCFlagP       "CC =" ccflagXPreg "<=" ccflagYImm  is ccflagI=0x1 & ccflagG=0x1 & ccflagXPreg & ccflagYImm { 
    CC = (ccflagXPreg s<= ccflagYImm);
}
}

with : ccflagOpc=0x3 {
:CompRegisters "CC =" ccflagXDreg < ccflagYDreg "(IU)" is ccflagI=0x0 & ccflagG=0x0 & ccflagXDreg & ccflagYDreg { 
    CC = (ccflagXDreg < ccflagYDreg);
}
:CompRegisters "CC =" ccflagXDreg < ccflagYUImm "(IU)" is ccflagI=0x1 & ccflagG=0x0 & ccflagXDreg & ccflagYUImm { 
    CC = (ccflagXDreg < ccflagYUImm);
}
:CCFlagP       "CC =" ccflagXPreg < ccflagYPreg "(IU)" is ccflagI=0x0 & ccflagG=0x1 & ccflagXPreg & ccflagYPreg { 
    CC = (ccflagXPreg < ccflagYPreg);
}
:CCFlagP       "CC =" ccflagXPreg < ccflagYUImm "(IU)" is ccflagI=0x1 & ccflagG=0x1 & ccflagXPreg & ccflagYUImm { 
    CC = (ccflagXPreg < ccflagYUImm);
}
}

with : ccflagOpc=0x4 {
:CompRegisters "CC =" ccflagXDreg "<=" ccflagYDreg "(IU)" is ccflagI=0x0 & ccflagG=0x0 & ccflagXDreg & ccflagYDreg { 
    CC = (ccflagXDreg <= ccflagYDreg);
}
:CompRegisters "CC =" ccflagXDreg "<=" ccflagYUImm "(IU)" is ccflagI=0x1 & ccflagG=0x0 & ccflagXDreg & ccflagYUImm { 
    CC = (ccflagXDreg <= ccflagYUImm);
}
:CCFlagP       "CC =" ccflagXPreg "<=" ccflagYPreg "(IU)" is ccflagI=0x0 & ccflagG=0x1 & ccflagXPreg & ccflagYPreg { 
    CC = (ccflagXPreg <= ccflagYPreg);
}
:CCFlagP       "CC =" ccflagXPreg "<=" ccflagYUImm "(IU)" is ccflagI=0x1 & ccflagG=0x1 & ccflagXPreg & ccflagYUImm { 
    CC = (ccflagXPreg <= ccflagYUImm);
}
}

CompAccAux: "CC = A0 == A1" is ccflagOpc=0x5 { CC = (A0 == A1); }
CompAccAux: "CC = A0 < A1"  is ccflagOpc=0x6 { CC = (A0 s< A1); }
CompAccAux: "CC = A0 <= A1" is ccflagOpc=0x7 { CC = (A0 s<= A1); }

:CompAccumulators CompAccAux is CompAccAux { build CompAccAux; }
}


## Conditional Branch PC relative on CC (BrCC)
## 
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 1 |.t.|.b.|.off.(imm10s2).........................|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

brccAddr: addr is brccOff [addr = inst_start + brccOff * 2;]{ export *[ram]:4 addr; }

with : opcode04=0x1 {
:BrCC "if !CC JUMP" brccAddr        is brccT=0x0 & brccB=0x0 & brccAddr { if (CC) goto brccAddr; }
:BrCC "if !CC JUMP" brccAddr "(BP)" is brccT=0x0 & brccB=0x1 & brccAddr { if (CC) goto brccAddr; }
:BrCC "if CC JUMP" brccAddr         is brccT=0x1 & brccB=0x0 & brccAddr { if (!CC) goto brccAddr; }
:BrCC "if CC JUMP" brccAddr "(BP)"  is brccT=0x1 & brccB=0x1 & brccAddr { if (!CC) goto brccAddr; }
}


## Unconditional Branch PC relative with 12bit offset (UJump)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 1 | 0 |.off.(imm12nxs2)...............................|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

ujmpImm: addr is ujmpOff [addr = inst_start + ujmpOff * 2;]{ export *[ram]:4 addr; }

:JumpAbs "JUMP.S" ujmpImm is opcode04=0x2 & ujmpImm { goto ujmpImm; }


## Register to register transfer operation (RegMv)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 1 | 1 |.gd........|.gs........|.dst.......|.src.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

rmvGDST4: rmvDstDReg    is rmvGd=0x0 & rmvDstDReg { export rmvDstDReg; } 
rmvGDST4: rmvDstPReg    is rmvGd=0x1 & rmvDstPReg { export rmvDstPReg; } 
rmvGDST4: rmvDstIReg    is rmvGd=0x2 & rmvDstReg1=0x0 & rmvDstIReg { export rmvDstIReg; } 
rmvGDST4: rmvDstMReg    is rmvGd=0x2 & rmvDstReg1=0x1 & rmvDstMReg { export rmvDstMReg; } 
rmvGDST4: rmvDstBReg    is rmvGd=0x3 & rmvDstReg1=0x0 & rmvDstBReg { export rmvDstBReg; } 
rmvGDST4: rmvDstLReg    is rmvGd=0x3 & rmvDstReg1=0x1 & rmvDstLReg { export rmvDstLReg; } 
rmvGDST4: "A0.W"        is rmvGd=0x4 & rmvDstAccReg=0x1 { export A0.W; } 
rmvGDST4: "A1.W"        is rmvGd=0x4 & rmvDstAccReg=0x3 { export A0.W; } 
rmvGDST4: "ASTAT"       is rmvGd=0x4 & rmvDstAccReg=0x6 { export ASTAT; } 
rmvGDST4: "RETS"        is rmvGd=0x4 & rmvDstAccReg=0x7 { export RETS; } 
rmvGDST4: rmvDstSysReg2 is rmvGd=0x6 & rmvDstSysReg2 { export rmvDstSysReg2; } 
rmvGDST4: rmvDstSysReg3 is rmvGd=0x7 & rmvDstSysReg3 { export rmvDstSysReg3; } 

rmvGDST1: "A0.X"        is rmvGd=0x4 & rmvDstAccReg=0x0 { export A0.X; } 
rmvGDST1: "A1.X"        is rmvGd=0x4 & rmvDstAccReg=0x2 { export A1.X; } 

rmvGSRC4: rmvSrcPReg    is rmvGs=0x1 & rmvSrcPReg { export rmvSrcPReg; }
rmvGSRC4: rmvSrcDReg    is rmvGs=0x0 & rmvSrcDReg { export rmvSrcDReg; }
rmvGSRC4: rmvSrcIReg    is rmvGs=0x2 & rmvSrcReg1=0x0 & rmvSrcIReg { export rmvSrcIReg; } 
rmvGSRC4: rmvSrcMReg    is rmvGs=0x2 & rmvSrcReg1=0x1 & rmvSrcMReg { export rmvSrcMReg; } 
rmvGSRC4: rmvSrcBReg    is rmvGs=0x3 & rmvSrcReg1=0x0 & rmvSrcBReg { export rmvSrcBReg; } 
rmvGSRC4: rmvSrcLReg    is rmvGs=0x3 & rmvSrcReg1=0x1 & rmvSrcLReg { export rmvSrcLReg; } 
rmvGSRC4: "A0.W"        is rmvGs=0x4 & rmvSrcAccReg=0x1 { export A0.W; } 
rmvGSRC4: "A1.W"        is rmvGs=0x4 & rmvSrcAccReg=0x3 { export A1.W; } 
rmvGSRC4: "ASTAT"       is rmvGs=0x4 & rmvSrcAccReg=0x6 { export ASTAT; } 
rmvGSRC4: "RETS"        is rmvGs=0x4 & rmvSrcAccReg=0x7 { export RETS; } 
rmvGSRC4: rmvSrcSysReg2 is rmvGs=0x6 & rmvSrcSysReg2 { export rmvSrcSysReg2; } 
rmvGSRC4: rmvSrcSysReg3 is rmvGs=0x7 & rmvSrcSysReg3 { export rmvSrcSysReg3; } 

rmvGSRC1: "A0.X"        is rmvGs=0x4 & rmvSrcAccReg=0x0 { export A0.X; } 
rmvGSRC1: "A1.X"        is rmvGs=0x4 & rmvSrcAccReg=0x2 { export A1.X; } 

with : opcode04=0x3 {
:MvRegToReg rmvGDST4 = rmvGSRC4 is rmvGDST4 & rmvGSRC4 { rmvGDST4 = rmvGSRC4; }
:MvRegToReg rmvGDST1 = rmvGSRC4 is rmvGDST1 & rmvGSRC4 { rmvGDST1 = rmvGSRC4:1; }

:MvRegToReg rmvGDST4 = rmvGSRC1 is rmvGDST4 & rmvGSRC1 { rmvGDST4 = sext(rmvGSRC1); }
:MvRegToReg rmvGDST1 = rmvGSRC1 is rmvGDST1 & rmvGSRC1 { rmvGDST1 = rmvGSRC1; }
}


## ALU Binary Operations (ALU2op)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 1 | 0 | 0 | 0 | 0 |.opc...........|.src.......|.dst.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

# TODO implement Divide 
define pcodeop divs; 
define pcodeop divq;

with : opcode06=0x10 {
:AShift32       alu2opDst ">>>=" alu2opSrc                     is alu2opOpc=0x0 & alu2opSrc & alu2opDst {
    alu2opDst = alu2opDst s>> alu2opSrc;
}
:LShift         alu2opDst ">>=" alu2opSrc                      is alu2opOpc=0x1 & alu2opSrc & alu2opDst {
    alu2opDst = alu2opDst >> alu2opSrc;
}
:LShift         alu2opDst "<<=" alu2opSrc                      is alu2opOpc=0x2 & alu2opSrc & alu2opDst {
    alu2opDst = alu2opDst << alu2opSrc;
}
:MultInt        alu2opDst *= alu2opSrc                         is alu2opOpc=0x3 & alu2opSrc & alu2opDst {
    alu2opDst = alu2opDst * alu2opSrc;
}
:AddSubShift    alu2opDst = (alu2opDstCp + alu2opSrc) "<< 0x1" is alu2opOpc=0x4 & alu2opSrc & alu2opDst & alu2opDstCp {
    alu2opDst = (alu2opDst + alu2opSrc) << 1;
}
:AddSubShift    alu2opDst = (alu2opDstCp + alu2opSrc) "<< 0x2" is alu2opOpc=0x5 & alu2opSrc & alu2opDst & alu2opDstCp {
    alu2opDst = (alu2opDst + alu2opSrc) << 2;
}
:Divide         "DIVQ" (alu2opDst, alu2opSrc)                  is alu2opOpc=0x8 & alu2opSrc & alu2opDst { 
    divq(alu2opDst, alu2opSrc); 
}
:Divide         "DIVS" (alu2opDst, alu2opSrc)                  is alu2opOpc=0x9 & alu2opSrc & alu2opDst { 
    divs(alu2opDst, alu2opSrc); 
}
:MvDregLToDreg  alu2opDst = alu2opSrcL "(X)"                   is alu2opOpc=0xa & alu2opSrcL & alu2opDst { 
    alu2opDst = sext(alu2opSrcL);
}
:MvDregLToDreg  alu2opDst = alu2opSrcL "(Z)"                   is alu2opOpc=0xb & alu2opSrcL & alu2opDst {
    alu2opDst = zext(alu2opSrcL);
}
:MvDregBToDreg  alu2opDst = alu2opSrcB "(X)"                   is alu2opOpc=0xc & alu2opSrcB & alu2opDst {
    alu2opDst = sext(alu2opSrcB);
}
:MvDregBToDreg  alu2opDst = alu2opSrcB "(Z)"                   is alu2opOpc=0xd & alu2opSrcB & alu2opDst {
    alu2opDst = zext(alu2opSrcB);
}
:Neg32          alu2opDst = -alu2opSrc                         is alu2opOpc=0xe & alu2opSrc & alu2opDst {
    alu2opDst = -alu2opSrc;
}
:Not32          alu2opDst = "~"alu2opSrc                       is alu2opOpc=0xf & alu2opSrc & alu2opDst {
    alu2opDst = ~alu2opSrc;
}
}


## Pointer Arithmetic Operations (Ptr2op)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 1 | 0 | 0 | 0 | 1 | 0 |.opc.......|.src.......|.dst.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode07=0x22 {
:DagAdd32       p2oDst -= p2oSrc                       is p2oOpc=0x0 & p2oSrc & p2oDst { p2oDst = p2oDst - p2oSrc; }
:LShiftPtr      p2oDst = p2oSrc "<< 0x2"               is p2oOpc=0x1 & p2oSrc & p2oDst { p2oDst = p2oSrc << 2; }
:LShiftPtr      p2oDst = p2oSrc "<< 0x1"               is p2oOpc=0x2 & p2oSrc & p2oDst { p2oDst = p2oSrc << 1; }
:LShiftPtr      p2oDst = p2oSrc ">> 0x2"               is p2oOpc=0x3 & p2oSrc & p2oDst { p2oDst = p2oSrc >> 2; }
:LShiftPtr      p2oDst = p2oSrc ">> 0x1"               is p2oOpc=0x4 & p2oSrc & p2oDst { p2oDst = p2oSrc >> 1; }
:DagAdd32       p2oDst += p2oSrc "(BREV)"              is p2oOpc=0x5 & p2oSrc & p2oDst {
    # TODO implement the reverse carry addition part
    p2oDst = p2oDst + p2oSrc;
}
:DagAddSubShift p2oDst = (p2oDstCpy + p2oSrc) "<< 0x1" is p2oOpc=0x6 & p2oSrc & p2oDst & p2oDstCpy {
    p2oDst = (p2oDst + p2oSrc) << 1;
}
:DagAddSubShift p2oDst = (p2oDstCpy + p2oSrc) "<< 0x2" is p2oOpc=0x7 & p2oSrc & p2oDst & p2oDstCpy {
    p2oDst = (p2oDst + p2oSrc) << 2;
}
}


## Logic Binary Operations (Logi2Op)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 1 | 0 | 0 | 1 |.opc.......|.src...............|.dst.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode05=0x09 {
:ShiftBitTst  "CC = !BITTST"(l2oDst, l2oSrc) is l2oOpc=0x0 & l2oSrc & l2oDst { CC = (0 == (l2oDst & (1 << l2oSrc))); }
:ShiftBitTst  "CC = BITTST"(l2oDst, l2oSrc)  is l2oOpc=0x1 & l2oSrc & l2oDst { CC = (0 != (l2oDst & (1 << l2oSrc))); }
:Shift_BitMod "BITSET"(l2oDst, l2oSrc)       is l2oOpc=0x2 & l2oSrc & l2oDst { l2oDst = l2oDst | (1 << l2oSrc); }
:Shift_BitMod "BITTGL"(l2oDst, l2oSrc)       is l2oOpc=0x3 & l2oSrc & l2oDst { l2oDst = l2oDst ^ (1 << l2oSrc); }
:Shift_BitMod "BITCLR"(l2oDst, l2oSrc)       is l2oOpc=0x4 & l2oSrc & l2oDst { l2oDst = l2oDst & ~(1 << l2oSrc); }
:AShift32     l2oDst ">>>=" l2oSrc           is l2oOpc=0x5 & l2oSrc & l2oDst { l2oDst = l2oDst s>> l2oSrc; }
:LShift       l2oDst ">>=" l2oSrc            is l2oOpc=0x6 & l2oSrc & l2oDst { l2oDst = l2oDst >> l2oSrc; }
:LShift       l2oDst "<<=" l2oSrc            is l2oOpc=0x7 & l2oSrc & l2oDst { l2oDst = l2oDst << l2oSrc; }
}


## Compute with 3 operands (Comp3op)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 1 | 0 | 1 |.opc.......|.dst.......|.src1......|.src0......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode04=0x5 {
:AddSub32 cp3opDstD = cp3opSrc0D + cp3opSrc1D            is cp3opOpc=0x0 & cp3opDstD & cp3opSrc0D & cp3opSrc1D {
    cp3opDstD = cp3opSrc0D + cp3opSrc1D;
}
:AddSub32 cp3opDstD = cp3opSrc0D - cp3opSrc1D            is cp3opOpc=0x1 & cp3opDstD & cp3opSrc0D & cp3opSrc1D {
    cp3opDstD = cp3opSrc0D - cp3opSrc1D;
}
:Logic32  cp3opDstD = cp3opSrc0D & cp3opSrc1D            is cp3opOpc=0x2 & cp3opDstD & cp3opSrc0D & cp3opSrc1D {
    cp3opDstD = cp3opSrc0D & cp3opSrc1D;
}
:Logic32  cp3opDstD = cp3opSrc0D | cp3opSrc1D            is cp3opOpc=0x3 & cp3opDstD & cp3opSrc0D & cp3opSrc1D {
    cp3opDstD = cp3opSrc0D | cp3opSrc1D;
}
:Logic32  cp3opDstD = cp3opSrc0D ^ cp3opSrc1D            is cp3opOpc=0x4 & cp3opDstD & cp3opSrc0D & cp3opSrc1D {
    cp3opDstD = cp3opSrc0D ^ cp3opSrc1D;
}
:DagAdd32 cp3opDstP = cp3opSrc0P + cp3opSrc1P            is cp3opOpc=0x5 & cp3opDstP & cp3opSrc0P & cp3opSrc1P {
    cp3opDstP = cp3opSrc0P + cp3opSrc1P;
}
:PtrOp    cp3opDstP = cp3opSrc0P + (cp3opSrc1P "<< 0x1") is cp3opOpc=0x6 & cp3opDstP & cp3opSrc0P & cp3opSrc1P {
    cp3opDstP = cp3opSrc0P + (cp3opSrc1P << 1);
}
:PtrOp    cp3opDstP = cp3opSrc0P + (cp3opSrc1P "<< 0x2") is cp3opOpc=0x7 & cp3opDstP & cp3opSrc0P & cp3opSrc1P {
    cp3opDstP = cp3opSrc0P + (cp3opSrc1P << 2);
}
}


## Destructive Binary Operations, dreg with 7bit immediate (CompI2opD)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 1 | 1 | 0 | 0 |opc|.src.......................|.dst.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode05=0x0c {
:LdImmToReg cpi2opDstD = cpi2opSrc "(X)" is cpi2opOpc=0x0 & cpi2opSrc & cpi2opDstD { cpi2opDstD = sext(cpi2opSrc:1); }
:AddImm     cpi2opDstD += cpi2opSrc      is cpi2opOpc=0x1 & cpi2opSrc & cpi2opDstD { 
    cpi2opDstD = cpi2opDstD + cpi2opSrc; 
}
}


## Destructive Binary Operations, preg with 7bit immediate (CompI2opP)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 1 | 1 | 0 | 1 |opc|.src.......................|.dst.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode05=0x0d {
:LdImmToReg cpi2opDstP = cpi2opSrc "(X)" is cpi2opOpc=0x0 & cpi2opSrc & cpi2opDstP { cpi2opDstP = sext(cpi2opSrc:1); }
:DagAddImm  cpi2opDstP += cpi2opSrc      is cpi2opOpc=0x1 & cpi2opSrc & cpi2opDstP { 
    cpi2opDstP = cpi2opDstP + cpi2opSrc; 
}
}


######################################################################
########>--------        16 bits instructions        --------<########
############################## MAIN_16B ##############################


## Load/Store postmodify addressing, pregister based (LdStPmod)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 0 | 0 |.w.|.aop...|.reg.......|.idx.......|.ptr.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

lspAddr: [lspPtr++lspIdx] is lspPtr & lspIdx { local ptr = lspPtr; ptr = ptr + lspIdx; export ptr; }

with : opcode04=0x8 {
with : lspW=0x0 {
:LdM32bitToDreg  lspReg = lspAddr          is lspAop=0x0 & lspReg & lspAddr { lspReg = *[ram]:4 lspAddr; }
:LdM16bitToDregL lspRegL = "W"lspAddr      is lspAop=0x1 & lspRegL & lspAddr { lspRegL = *[ram]:2 lspAddr; }
:LdM16bitToDregH lspRegH = "W"lspAddr      is lspAop=0x2 & lspRegH & lspAddr { lspRegH = *[ram]:2 lspAddr; }
:LdM16bitToDreg  lspReg = "W"lspAddr "(Z)" is lspAop=0x3 & lspReg & lspAddr { lspReg = zext(*[ram]:2 lspAddr); }
}

with : lspW=0x1 {
:StDregToM32bit  lspAddr = lspReg          is lspAop=0x0 & lspReg & lspAddr { *[ram]:4 lspAddr = lspReg; }
:StDregLToM16bit "W"lspAddr = lspRegL      is lspAop=0x1 & lspRegL & lspAddr { *[ram]:2 lspAddr = lspRegL; }
:StDregHToM16bit "W"lspAddr = lspRegH      is lspAop=0x2 & lspRegH & lspAddr { *[ram]:2 lspAddr = lspRegH; }
:LdM16bitToDreg  lspReg = "W"lspAddr "(X)" is lspAop=0x3 & lspReg & lspAddr { lspReg = sext(*[ram]:2 lspAddr); }
}
}


## Load/Store (LdSt)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 0 | 1 |.sz....|.w.|.aop...|.z.|.ptr.......|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

ldstPtrOp: [ldstPtr++] is ldstSz & ldstAop=0x0 & ldstPtr { local ptr = ldstPtr; ptr = ptr + (4 >> ldstSz); export ptr; }
ldstPtrOp: [ldstPtr--] is ldstSz & ldstAop=0x1 & ldstPtr { local ptr = ldstPtr; ptr = ptr - (4 >> ldstSz); export ptr; }
ldstPtrOp: [ldstPtr]   is ldstAop=0x2 & ldstPtr { export ldstPtr; }

with : opcode04=0x9 {
with : ldstW=0x0 & ldstSz=0x0 {
:LdM32bitToDreg ldstReg = ldstPtrOp is ldstZ=0x0 & ldstPtrOp & ldstReg { ldstReg = *[ram]:4 ldstPtrOp; }
}

with : ldstW=0x0 & ldstSz=0x1 {
:LdM16bitToDreg ldstReg = "W"ldstPtrOp "(Z)" is ldstZ=0x0 & ldstPtrOp & ldstReg { ldstReg = zext(*[ram]:2 ldstPtrOp); }
:LdM16bitToDreg ldstReg = "W"ldstPtrOp "(X)" is ldstZ=0x1 & ldstPtrOp & ldstReg { ldstReg = sext(*[ram]:2 ldstPtrOp); }
}

with : ldstW=0x0 & ldstSz=0x2 {
:LdM08bitToDreg ldstReg = "B"ldstPtrOp "(Z)" is ldstZ=0x0 & ldstPtrOp & ldstReg { ldstReg = zext(*[ram]:1 ldstPtrOp); }
:LdM08bitToDreg ldstReg = "B"ldstPtrOp "(X)" is ldstZ=0x1 & ldstPtrOp & ldstReg { ldstReg = sext(*[ram]:1 ldstPtrOp); }
}

with : ldstW=0x1 & ldstSz=0x0 {
:StDregToM32bit ldstPtrOp = ldstReg  is ldstZ=0x0 & ldstPtrOp & ldstReg { *[ram]:4 ldstPtrOp = ldstReg; }
:StPregToM32bit ldstPtrOp = ldstPReg is ldstZ=0x1 & ldstPtrOp & ldstPReg { *[ram]:4 ldstPtrOp = ldstPReg; }
}

with : ldstW=0x1 & ldstSz=0x1 {
:StDregLToM16bit "W"ldstPtrOp = ldstReg  is ldstZ=0x0 & ldstPtrOp & ldstReg { *[ram]:2 ldstPtrOp = ldstReg:2; }
}

with : ldstW=0x1 & ldstSz=0x2 {
:StDregLToM08bit "B"ldstPtrOp = ldstReg  is ldstZ=0x0 & ldstPtrOp & ldstReg { *[ram]:1 ldstPtrOp = ldstReg:1; }
}
}


## Load/Store (Ldp)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 0 | 1 | 0 | 0 | 0 |.aop...| 1 |.ptr.......|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

ldpPtrOp: [ldpPtr++] is ldpAop=0x0 & ldpPtr { local ptr = ldpPtr; ptr = ptr + 4; export ptr; }
ldpPtrOp: [ldpPtr--] is ldpAop=0x1 & ldpPtr { local ptr = ldpPtr; ptr = ptr - 4; export ptr; }
ldpPtrOp: [ldpPtr]   is ldpAop=0x2 & ldpPtr { export ldpPtr; }

with : opcode07=0x48 & ldpOne=0x1 {
:LdM32bitToPreg ldpReg = ldpPtrOp is ldpPtrOp & ldpReg { ldpReg = *[ram]:4 ldpPtrOp; }
} 


## Load/Store (DspLdSt)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 0 | 1 | 1 | 1 |.w.|.aop...|.m.....|.i.....|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+


dlsIOp: [dlsI++] is dlsAop=0x0 & dlsI { local ptr = dlsI; ptr = ptr + 4; export ptr; }
dlsIOp: [dlsI--] is dlsAop=0x1 & dlsI { local ptr = dlsI; ptr = ptr - 4; export ptr; }
dlsIOp: [dlsI]   is dlsAop=0x2 & dlsI { export dlsI; }

dlsIOp: [dlsI++dlsM] is dlsAop=0x3 & dlsM & dlsI { local ptr = dlsI; ptr = ptr + dlsM; export ptr; }

dlsIOpW: "W"[dlsI++] is dlsAop=0x0 & dlsI { local ptr = dlsI; ptr = ptr + 2; export ptr; }
dlsIOpW: "W"[dlsI--] is dlsAop=0x1 & dlsI { local ptr = dlsI; ptr = ptr - 2; export ptr; }
dlsIOpW: "W"[dlsI]   is dlsAop=0x2 & dlsI { export dlsI; }

with : opcode06=0x27 {
with : dlsW=0x0 {
:LdM32bitToDreg dlsReg = dlsIOp is dlsM=0x0 & dlsIOp & dlsReg { dlsReg =  *[ram]:4 dlsIOp; }

:LdM16bitToDregL dlsRegL = dlsIOpW is dlsM=0x1 & dlsIOpW & dlsRegL { dlsRegL =  *[ram]:2 dlsIOpW; }
:LdM16bitToDregH dlsRegH = dlsIOpW is dlsM=0x2 & dlsIOpW & dlsRegH { dlsRegH =  *[ram]:2 dlsIOpW; }

:LdM32bitToDreg dlsReg = dlsIOp is dlsIOp & dlsReg { dlsReg =  *[ram]:4 dlsIOp; }
}

with : dlsW=0x1 {
:StDregToM32bit dlsIOp = dlsReg is dlsM=0x0 & dlsIOp & dlsReg { *[ram]:4 dlsIOp = dlsReg; }

:StDregLToM16bit dlsIOpW = dlsRegL is dlsM=0x1 & dlsIOpW & dlsRegL { *[ram]:2 dlsIOpW = dlsRegL; }
:StDregHToM16bit dlsIOpW = dlsRegH is dlsM=0x2 & dlsIOpW & dlsRegH { *[ram]:2 dlsIOpW = dlsRegH; }

:StDregToM32bit dlsIOp = dlsReg is dlsIOp & dlsReg { *[ram]:4 dlsIOp = dlsReg; }
}
}


## DAG Arithmetic (DAGModIm)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 0 |.br| 1 | 1 |.op|.m.....|.i.....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode08=0x9e & dagmdimOpcode=0x3 {
:DagAdd32 dagmdimI += dagmdimM          is dagmdimBr=0x0 & dagmdimOp=0x0 & dagmdimM & dagmdimI { 
    dagmdimI = dagmdimI + dagmdimM;
}
:DagAdd32 dagmdimI += dagmdimM "(BREV)" is dagmdimBr=0x1 & dagmdimOp=0x0 & dagmdimM & dagmdimI { 
    # TODO implement the reverse carry addition part
    dagmdimI = dagmdimI + dagmdimM;
}
:DagAdd32 dagmdimI -= dagmdimM          is dagmdimBr=0x0 & dagmdimOp=0x1 & dagmdimM & dagmdimI { 
    dagmdimI = dagmdimI - dagmdimM;
}
}


## DAG Arithmetic (DAGModIk)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 0 | 1 | 1 | 1 | 1 | 1 | 0 | 1 | 1 | 0 |.opc...|.i.....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

with : opcode12=0x9f6 {
:DagAddImm dagmdikI += "0x2" is dagmdikOpc=0x0 & dagmdikI { dagmdikI = dagmdikI + 2; }
:DagAddImm dagmdikI -= "0x2" is dagmdikOpc=0x1 & dagmdikI { dagmdikI = dagmdikI - 2; }
:DagAddImm dagmdikI += "0x4" is dagmdikOpc=0x2 & dagmdikI { dagmdikI = dagmdikI + 4; }
:DagAddImm dagmdikI -= "0x4" is dagmdikOpc=0x3 & dagmdikI { dagmdikI = dagmdikI - 4; }
}


## Load/Store indexed with small immediate offset (LdStII)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 1 |.w.|.op....|.off...........|.ptr.......|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

lsiiImm2: [lsiiPtr + imm] is lsiiOff & lsiiPtr [imm = lsiiOff * 2;] { local ptr:4 = lsiiPtr + imm; export ptr; }
lsiiImm4: [lsiiPtr + imm] is lsiiOff & lsiiPtr [imm = lsiiOff * 4;] { local ptr:4 = lsiiPtr + imm; export ptr; }

with : opcode03=0x5 {
with : lsiiW=0x0 {
:LdM32bitToDreg lsiiDReg = lsiiImm4          is lsiiOp=0x0 & lsiiImm4 & lsiiDReg { lsiiDReg = *[ram]:4 lsiiImm4; }
:LdM16bitToDreg lsiiDReg = "W"lsiiImm2 "(Z)" is lsiiOp=0x1 & lsiiImm2 & lsiiDReg { lsiiDReg = zext(*[ram]:2 lsiiImm2); }
:LdM16bitToDreg lsiiDReg = "W"lsiiImm2 "(X)" is lsiiOp=0x2 & lsiiImm2 & lsiiDReg { lsiiDReg = sext(*[ram]:2 lsiiImm2); }
}

with : lsiiW=0x1 {
:StDregToM32bit  lsiiImm4 = lsiiDReg    is lsiiOp=0x0 & lsiiImm4 & lsiiDReg { *[ram]:4 lsiiImm4 = lsiiDReg; }
:StDregLToM16bit "W"lsiiImm2 = lsiiDReg is lsiiOp=0x1 & lsiiImm2 & lsiiDReg { *[ram]:2 lsiiImm2 = lsiiDReg:2; }
:StPregToM32bit  lsiiImm4 = lsiiPReg    is lsiiOp=0x3 & lsiiImm4 & lsiiPReg { *[ram]:4 lsiiImm4 = lsiiPReg; }
}
}


## Load/Store indexed with small immediate offset (LdpII)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 1 | 0 | 1 | 1 |.off...........|.ptr.......|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

lpiiImm4: [lpiiPtr + imm] is lpiiOff & lpiiPtr [imm = lpiiOff * 4;]{ local ptr = lpiiPtr + imm; export *[ram]:4 ptr; }

:LdM32bitToPreg lpiiReg = lpiiImm4 is opcode06=0x2b & lpiiImm4 & lpiiReg { lpiiReg = *lpiiImm4; }


## Load/Store indexed with small immediate offset FP (LdStIIFP)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 1 | 1 | 1 | 0 |.w.|.off...............|.g.|.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

lsfpImm: ["FP" - imm] is lsfpOff [imm = 0x80 - (lsfpOff << 2);]{ local ptr = FP - imm; export *[ram]:4 ptr; }

with : opcode06=0x2e {
:LdM32bitToDreg lsfpDReg = lsfpImm is lsfpW=0x0 & lsfpImm & lsfpG=0x0 & lsfpDReg { lsfpDReg = *lsfpImm; }
:StDregToM32bit lsfpImm = lsfpDReg is lsfpW=0x1 & lsfpImm & lsfpG=0x0 & lsfpDReg { *lsfpImm = lsfpDReg; }
:StDregToM32bit lsfpImm = lsfpPReg is lsfpW=0x1 & lsfpImm & lsfpG=0x1 & lsfpPReg { *lsfpImm = lsfpPReg; }
}


## Load/Store indexed with small immediate offset (LdpIIFP)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 1 | 1 | 1 | 0 | 0 |.off...............| 1 |.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

lpfpImm: ["FP" - imm] is lpfpOff [imm = 0x80 - (lpfpOff << 2);]{ local ptr = FP - imm; export *[ram]:4 ptr; }

:LdM32bitToDreg lpfpReg = lpfpImm is opcode07=0x5c & lpfpImm & lpfpOne=0x1 & lpfpReg { lpfpReg = *lpfpImm; }


