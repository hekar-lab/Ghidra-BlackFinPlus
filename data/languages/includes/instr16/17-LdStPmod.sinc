## Load/Store postmodify addressing, pregister based (LdStPmod)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 0 | 0 |.w.|..aop..|....reg....|....idx....|....ptr....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token lspInstr16 (16)
	lspSig           = (12,15) 
	lspW             = (11,11) 
	lspAop           = ( 9,10) 
	lspReg           = ( 6, 8) 
	lspRegL          = ( 6, 8) 
	lspRegH          = ( 6, 8) 
	lspIdx           = ( 3, 5) 
	lspPtr           = ( 0, 2) 
;


### Variables ###

attach variables lspReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables lspRegL [R0.L R1.L R2.L R3.L R4.L R5.L R6.L R7.L];
attach variables lspRegH [R0.H R1.H R2.H R3.H R4.H R5.H R6.H R7.H];
attach variables [lspIdx lspPtr] [P0 P1 P2 P3 P4 P5 SP FP];


### Instructions ###

lspAddr: [lspPtr++lspIdx] is lspPtr & lspIdx { local ptr = lspPtr; ptr = ptr + lspIdx; export ptr; }

with LdStPmod: lspSig=0x8 {
with : lspW=0x0 {
: "LdM32bitToDreg"  lspReg = lspAddr          is lspAop=0x0 & lspReg & lspAddr { lspReg = *[ram]:4 lspAddr; }
: "LdM16bitToDregL" lspRegL = "W"lspAddr      is lspAop=0x1 & lspRegL & lspAddr { lspRegL = *[ram]:2 lspAddr; }
: "LdM16bitToDregH" lspRegH = "W"lspAddr      is lspAop=0x2 & lspRegH & lspAddr { lspRegH = *[ram]:2 lspAddr; }
: "LdM16bitToDreg"  lspReg = "W"lspAddr "(Z)" is lspAop=0x3 & lspReg & lspAddr { lspReg = zext(*[ram]:2 lspAddr); }
}

with : lspW=0x1 {
: "StDregToM32bit"  lspAddr = lspReg          is lspAop=0x0 & lspReg & lspAddr { *[ram]:4 lspAddr = lspReg; }
: "StDregLToM16bit" "W"lspAddr = lspRegL      is lspAop=0x1 & lspRegL & lspAddr { *[ram]:2 lspAddr = lspRegL; }
: "StDregHToM16bit" "W"lspAddr = lspRegH      is lspAop=0x2 & lspRegH & lspAddr { *[ram]:2 lspAddr = lspRegH; }
: "LdM16bitToDreg"  lspReg = "W"lspAddr "(X)" is lspAop=0x3 & lspReg & lspAddr { lspReg = sext(*[ram]:2 lspAddr); }
}
}


:^LdStPmod is LdStPmod { build LdStPmod; }