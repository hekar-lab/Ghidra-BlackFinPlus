## Load/Store indexed with small immediate offset (LdStII)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 1 |.w.|..op...|......off......|....ptr....|....reg....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token lsiInstr16 (16)
	lsiSig           = (13,15) 
	lsiW             = (12,12) 
	lsiOp            = (10,11) 
	lsiOffUImm       = ( 6, 9) 
	lsiPtrPReg       = ( 3, 5) 
	lsiRegDReg       = ( 0, 2) 
	lsiRegPReg       = ( 0, 2) 
;


### Variables ###

attach variables lsiRegDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables lsiPtrPReg [P0 P1 P2 P3 P4 P5 SP FP];
attach variables lsiRegPReg [P0 P1 P2 P3 P4 P5 SP FP];


### Instructions ###

LdStII:^"LdM32bitToDreg" lsiRegDReg" = ["lsiPtrPReg" + "imm"]"
	is lsiSig=0x5 & lsiW=0x0 & lsiOp=0x0 & lsiOffUImm & lsiPtrPReg & lsiRegDReg 
[
	imm = lsiOffUImm * 0x4;
] {
	lsiRegDReg = *[ram]:4 (lsiPtrPReg + imm);
}

LdStII:^"LdM16bitToDreg" lsiRegDReg" = W["lsiPtrPReg" + "imm"] (Z)"
	is lsiSig=0x5 & lsiW=0x0 & lsiOp=0x1 & lsiOffUImm & lsiPtrPReg & lsiRegDReg 
[
	imm = lsiOffUImm * 0x2;
] {
	lsiRegDReg = zext(*[ram]:2 (lsiPtrPReg + imm));
}

LdStII:^"LdM16bitToDreg" lsiRegDReg" = W["lsiPtrPReg" + "imm"] (X)"
	is lsiSig=0x5 & lsiW=0x0 & lsiOp=0x2 & lsiOffUImm & lsiPtrPReg & lsiRegDReg 
[
	imm = lsiOffUImm * 0x2;
] {
	lsiRegDReg = sext(*[ram]:2 (lsiPtrPReg + imm));
}

LdStII:^"LdM32bitToPreg" lsiRegPReg" = ["lsiPtrPReg" + "imm"]"
	is lsiSig=0x5 & lsiW=0x0 & lsiOp=0x3 & lsiOffUImm & lsiPtrPReg & lsiRegPReg 
[
	imm = lsiOffUImm * 0x4;
] {
	lsiRegPReg = *[ram]:4 (lsiPtrPReg + imm);
}

LdStII:^"StDregToM32bit" "["lsiPtrPReg" + "imm"] = "lsiRegDReg
	is lsiSig=0x5 & lsiW=0x1 & lsiOp=0x0 & lsiOffUImm & lsiPtrPReg & lsiRegDReg 
[
	imm = lsiOffUImm * 0x4;
] {
	*[ram]:4 (lsiPtrPReg + imm) = lsiRegDReg;
}

LdStII:^"StDregLToM16bit" "W["lsiPtrPReg" + "imm"] = "lsiRegDReg
	is lsiSig=0x5 & lsiW=0x1 & lsiOp=0x1 & lsiOffUImm & lsiPtrPReg & lsiRegDReg 
[
	imm = lsiOffUImm * 0x2;
] {
	*[ram]:2 (lsiPtrPReg + imm) = lsiRegDReg:2;
}

LdStII:^"StPregToM32bit" "["lsiPtrPReg" + "imm"] = "lsiRegPReg
	is lsiSig=0x5 & lsiW=0x1 & lsiOp=0x3 & lsiOffUImm & lsiPtrPReg & lsiRegPReg 
[
	imm = lsiOffUImm * 0x4;
] {
	*[ram]:4 (lsiPtrPReg + imm) = lsiRegPReg;
}



:^LdStII is LdStII { build LdStII; }
