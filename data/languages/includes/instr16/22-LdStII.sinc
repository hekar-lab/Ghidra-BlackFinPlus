## Load/Store indexed with small immediate offset (LdStII)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 1 |.w.|..op...|......off......|....ptr....|....reg....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token lsiInstr16 (16)
	lsiSig           = (13,15) 
	lsiW             = (12,12) 
	lsiOp            = (10,11) 
	lsiOff           = ( 6, 9) 
	lsiPtr           = ( 3, 5) 
	lsiDReg          = ( 0, 2) 
	lsiPReg          = ( 0, 2) 
;


### Variables ###

attach variables lsiDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables [lsiPtr lsiPReg] [P0 P1 P2 P3 P4 P5 SP FP];


### Instructions ###

lsiImm2: [lsiPtr + imm] is lsiOff & lsiPtr [imm = lsiOff * 2;] { local ptr:4 = lsiPtr + imm; export ptr; }
lsiImm4: [lsiPtr + imm] is lsiOff & lsiPtr [imm = lsiOff * 4;] { local ptr:4 = lsiPtr + imm; export ptr; }

with LdStII: lsiSig=0x5 {
with : lsiW=0x0 {
:^"LdM32bitToDreg" lsiDReg = lsiImm4          is lsiOp=0x0 & lsiImm4 & lsiDReg { lsiDReg = *[ram]:4 lsiImm4; }
:^"LdM16bitToDreg" lsiDReg = "W"lsiImm2 "(Z)" is lsiOp=0x1 & lsiImm2 & lsiDReg { lsiDReg = zext(*[ram]:2 lsiImm2); }
:^"LdM16bitToDreg" lsiDReg = "W"lsiImm2 "(X)" is lsiOp=0x2 & lsiImm2 & lsiDReg { lsiDReg = sext(*[ram]:2 lsiImm2); }
:^"LdM32bitToPreg" lsiPReg = lsiImm4          is lsiOp=0x3 & lsiImm4 & lsiPReg { lsiPReg = *[ram]:4 lsiImm4; }
}

with : lsiW=0x1 {
:^"StDregToM32bit"  lsiImm4 = lsiDReg    is lsiOp=0x0 & lsiImm4 & lsiDReg { *[ram]:4 lsiImm4 = lsiDReg; }
:^"StDregLToM16bit" "W"lsiImm2 = lsiDReg is lsiOp=0x1 & lsiImm2 & lsiDReg { *[ram]:2 lsiImm2 = lsiDReg:2; }
:^"StPregToM32bit"  lsiImm4 = lsiPReg    is lsiOp=0x3 & lsiImm4 & lsiPReg { *[ram]:4 lsiImm4 = lsiPReg; }
}
}


:^LdStII is LdStII { build LdStII; }
