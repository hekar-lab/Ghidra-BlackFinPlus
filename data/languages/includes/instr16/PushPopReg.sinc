## Push or Pop register, to and from the stack pointed to by SP (PushPopReg)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 |.w.|....grp....|....reg....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token pprInstr16 (16)
	pprSig           = ( 7,15) 
	pprW             = ( 6, 6) 
	pprGrp           = ( 3, 5) 
	pprReg           = ( 0, 2) 
	pprRegDReg       = ( 0, 2) 
	pprRegPReg       = ( 0, 2) 
	pprRegSyRg2      = ( 0, 2) 
	pprRegSyRg3      = ( 0, 2) 
	pprRegH          = ( 2, 2) 
	pprRegLIReg      = ( 0, 1) 
	pprRegLMReg      = ( 0, 1) 
	pprRegLBReg      = ( 0, 1) 
	pprRegLLReg      = ( 0, 1) 
;


### Variables ###

attach variables pprRegDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables pprRegPReg [P0 P1 P2 P3 P4 P5 SP FP];
attach variables pprRegLIReg [I0 I1 I2 I3];
attach variables pprRegLMReg [M0 M1 M2 M3];
attach variables pprRegLBReg [B0 B1 B2 B3];
attach variables pprRegLLReg [L0 L1 L2 L3];
attach variables pprRegSyRg2 [LC0 LT0 LB0 LC1 LT1 LB1 CYCLES CYCLES2];
attach variables pprRegSyRg3 [USP SEQSTAT SYSCFG RETI RETX RETN RETE EMUDAT];


### Instructions ###

PushPopReg:^"Pop" pprRegDReg" = [SP++]"
	is pprSig=0x002 & pprW=0x0 & pprGrp=0x0 & pprRegDReg 
{
	pprRegDReg = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopReg:^"Push" "[--SP] = "pprRegDReg
	is pprSig=0x002 & pprW=0x1 & pprGrp=0x0 & pprRegDReg 
{
	SP = SP - 0x4;
	*[ram]:4 SP = pprRegDReg;
}

PushPopReg:^"Pop" pprRegPReg" = [SP++]"
	is pprSig=0x002 & pprW=0x0 & pprGrp=0x1 & pprRegPReg 
{
	pprRegPReg = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopReg:^"Push" "[--SP] = "pprRegPReg
	is pprSig=0x002 & pprW=0x1 & pprGrp=0x1 & pprRegPReg 
{
	SP = SP - 0x4;
	*[ram]:4 SP = pprRegPReg;
}

PushPopReg:^"Pop" pprRegLIReg" = [SP++]"
	is pprSig=0x002 & pprW=0x0 & pprGrp=0x2 & pprRegH=0x0 & pprRegLIReg 
{
	pprRegLIReg = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopReg:^"Push" "[--SP] = "pprRegLIReg
	is pprSig=0x002 & pprW=0x1 & pprGrp=0x2 & pprRegH=0x0 & pprRegLIReg 
{
	SP = SP - 0x4;
	*[ram]:4 SP = pprRegLIReg;
}

PushPopReg:^"Pop" pprRegLMReg" = [SP++]"
	is pprSig=0x002 & pprW=0x0 & pprGrp=0x2 & pprRegH=0x1 & pprRegLMReg 
{
	pprRegLMReg = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopReg:^"Push" "[--SP] = "pprRegLMReg
	is pprSig=0x002 & pprW=0x1 & pprGrp=0x2 & pprRegH=0x1 & pprRegLMReg 
{
	SP = SP - 0x4;
	*[ram]:4 SP = pprRegLMReg;
}

PushPopReg:^"Pop" pprRegLBReg" = [SP++]"
	is pprSig=0x002 & pprW=0x0 & pprGrp=0x3 & pprRegH=0x0 & pprRegLBReg 
{
	pprRegLBReg = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopReg:^"Push" "[--SP] = "pprRegLBReg
	is pprSig=0x002 & pprW=0x1 & pprGrp=0x3 & pprRegH=0x0 & pprRegLBReg 
{
	SP = SP - 0x4;
	*[ram]:4 SP = pprRegLBReg;
}

PushPopReg:^"Pop" pprRegLLReg" = [SP++]"
	is pprSig=0x002 & pprW=0x0 & pprGrp=0x3 & pprRegH=0x1 & pprRegLLReg 
{
	pprRegLLReg = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopReg:^"Push" "[--SP] = "pprRegLLReg
	is pprSig=0x002 & pprW=0x1 & pprGrp=0x3 & pprRegH=0x1 & pprRegLLReg 
{
	SP = SP - 0x4;
	*[ram]:4 SP = pprRegLLReg;
}

PushPopRegDesc0C: "A0.X = [SP++]" is epsilon {}
PushPopReg:^"Pop" PushPopRegDesc0C
	is PushPopRegDesc0C & pprSig=0x002 & pprW=0x0 & pprGrp=0x4 & pprReg=0x0 
{
	A0.X = *[ram]:1 SP;
	SP = SP + 0x4;
}

PushPopRegDesc0D: "[--SP] = A0.X" is epsilon {}
PushPopReg:^"Push" PushPopRegDesc0D
	is PushPopRegDesc0D & pprSig=0x002 & pprW=0x1 & pprGrp=0x4 & pprReg=0x0 
{
	SP = SP - 0x4;
	*[ram]:4 SP = sext(A0.X);
}

PushPopRegDesc0E: "A0.W = [SP++]" is epsilon {}
PushPopReg:^"Pop" PushPopRegDesc0E
	is PushPopRegDesc0E & pprSig=0x002 & pprW=0x0 & pprGrp=0x4 & pprReg=0x1 
{
	A0.W = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopRegDesc0F: "[--SP] = A0.W" is epsilon {}
PushPopReg:^"Push" PushPopRegDesc0F
	is PushPopRegDesc0F & pprSig=0x002 & pprW=0x1 & pprGrp=0x4 & pprReg=0x1 
{
	SP = SP - 0x4;
	*[ram]:4 SP = A0.W;
}

PushPopRegDesc10: "A1.X = [SP++]" is epsilon {}
PushPopReg:^"Pop" PushPopRegDesc10
	is PushPopRegDesc10 & pprSig=0x002 & pprW=0x0 & pprGrp=0x4 & pprReg=0x2 
{
	A1.X = *[ram]:1 SP;
	SP = SP + 0x4;
}

PushPopRegDesc11: "[--SP] = A1.X" is epsilon {}
PushPopReg:^"Push" PushPopRegDesc11
	is PushPopRegDesc11 & pprSig=0x002 & pprW=0x1 & pprGrp=0x4 & pprReg=0x2 
{
	SP = SP - 0x4;
	*[ram]:4 SP = sext(A1.X);
}

PushPopRegDesc12: "A1.W = [SP++]" is epsilon {}
PushPopReg:^"Pop" PushPopRegDesc12
	is PushPopRegDesc12 & pprSig=0x002 & pprW=0x0 & pprGrp=0x4 & pprReg=0x3 
{
	A1.W = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopRegDesc13: "[--SP] = A1.W" is epsilon {}
PushPopReg:^"Push" PushPopRegDesc13
	is PushPopRegDesc13 & pprSig=0x002 & pprW=0x1 & pprGrp=0x4 & pprReg=0x3 
{
	SP = SP - 0x4;
	*[ram]:4 SP = A1.W;
}

PushPopRegDesc14: "ASTAT = [SP++]" is epsilon {}
PushPopReg:^"Pop" PushPopRegDesc14
	is PushPopRegDesc14 & pprSig=0x002 & pprW=0x0 & pprGrp=0x4 & pprReg=0x6 
{
	ASTAT = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopRegDesc15: "[--SP] = ASTAT" is epsilon {}
PushPopReg:^"Push" PushPopRegDesc15
	is PushPopRegDesc15 & pprSig=0x002 & pprW=0x1 & pprGrp=0x4 & pprReg=0x6 
{
	SP = SP - 0x4;
	*[ram]:4 SP = ASTAT;
}

PushPopRegDesc16: "RETS = [SP++]" is epsilon {}
PushPopReg:^"Pop" PushPopRegDesc16
	is PushPopRegDesc16 & pprSig=0x002 & pprW=0x0 & pprGrp=0x4 & pprReg=0x7 
{
	RETS = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopRegDesc17: "[--SP] = RETS" is epsilon {}
PushPopReg:^"Push" PushPopRegDesc17
	is PushPopRegDesc17 & pprSig=0x002 & pprW=0x1 & pprGrp=0x4 & pprReg=0x7 
{
	SP = SP - 0x4;
	*[ram]:4 SP = RETS;
}

PushPopReg:^"Pop" pprRegSyRg2" = [SP++]"
	is pprSig=0x002 & pprW=0x0 & pprGrp=0x6 & pprRegSyRg2 
{
	pprRegSyRg2 = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopReg:^"Push" "[--SP] = "pprRegSyRg2
	is pprSig=0x002 & pprW=0x1 & pprGrp=0x6 & pprRegSyRg2 
{
	SP = SP - 0x4;
	*[ram]:4 SP = pprRegSyRg2;
}

PushPopReg:^"Pop" pprRegSyRg3" = [SP++]"
	is pprSig=0x002 & pprW=0x0 & pprGrp=0x7 & pprRegSyRg3 
{
	pprRegSyRg3 = *[ram]:4 SP;
	SP = SP + 0x4;
}

PushPopReg:^"Push" "[--SP] = "pprRegSyRg3
	is pprSig=0x002 & pprW=0x1 & pprGrp=0x7 & pprRegSyRg3 
{
	SP = SP - 0x4;
	*[ram]:4 SP = pprRegSyRg3;
}



:^PushPopReg is PushPopReg { build PushPopReg; }
