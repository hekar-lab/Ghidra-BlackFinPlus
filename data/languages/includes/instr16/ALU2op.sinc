## ALU Binary Operations (ALU2op)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 1 | 0 | 0 | 0 | 0 |......opc......|....src....|....dst....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token a2oInstr16 (16)
	a2oSig           = (10,15) 
	a2oOpc           = ( 6, 9) 
	a2oSrcDReg       = ( 3, 5) 
	a2oSrcDRegL      = ( 3, 5) 
	a2oSrcDRegB      = ( 3, 5) 
	a2oDstDReg       = ( 0, 2) 
;


### Variables ###

attach variables a2oSrcDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables a2oDstDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables a2oSrcDRegL [R0.L R1.L R2.L R3.L R4.L R5.L R6.L R7.L];
attach variables a2oSrcDRegB [R0.B R1.B R2.B R3.B R4.B R5.B R6.B R7.B];


### Operations ###

define pcodeop divs;
define pcodeop divq;


### Instructions ###

ALU2op:^"AShift32" a2oDstDReg" >>>= "a2oSrcDReg
	is a2oSig=0x10 & a2oOpc=0x0 & a2oSrcDReg & a2oDstDReg 
{
	a2oDstDReg = a2oDstDReg s>> a2oSrcDReg;
}
ALU2op:^"LShift" a2oDstDReg" >>= "a2oSrcDReg
	is a2oSig=0x10 & a2oOpc=0x1 & a2oSrcDReg & a2oDstDReg 
{
	a2oDstDReg = a2oDstDReg >> a2oSrcDReg;
}
ALU2op:^"LShift" a2oDstDReg" <<= "a2oSrcDReg
	is a2oSig=0x10 & a2oOpc=0x2 & a2oSrcDReg & a2oDstDReg 
{
	a2oDstDReg = a2oDstDReg << a2oSrcDReg;
}
ALU2op:^"MultInt" a2oDstDReg" *= "a2oSrcDReg
	is a2oSig=0x10 & a2oOpc=0x3 & a2oSrcDReg & a2oDstDReg 
{
	a2oDstDReg = a2oDstDReg * a2oSrcDReg;
}
ALU2op:^"AddSubShift" a2oDstDReg" +<<1= "a2oSrcDReg
	is a2oSig=0x10 & a2oOpc=0x4 & a2oSrcDReg & a2oDstDReg 
{
	a2oDstDReg = (a2oDstDReg + a2oSrcDReg) << 0x1;
}
ALU2op:^"AddSubShift" a2oDstDReg" +<<2= "a2oSrcDReg
	is a2oSig=0x10 & a2oOpc=0x5 & a2oSrcDReg & a2oDstDReg 
{
	a2oDstDReg = (a2oDstDReg + a2oSrcDReg) << 0x2;
}
ALU2op:^"Divide" "DIVQ ("a2oDstDReg", "a2oSrcDReg")"
	is a2oSig=0x10 & a2oOpc=0x8 & a2oSrcDReg & a2oDstDReg 
{
	divq(a2oDstDReg, a2oSrcDReg);
}
ALU2op:^"Divide" "DIVS ("a2oDstDReg", "a2oSrcDReg")"
	is a2oSig=0x10 & a2oOpc=0x9 & a2oSrcDReg & a2oDstDReg 
{
	divs(a2oDstDReg, a2oSrcDReg);
}
ALU2op:^"MvDregLToDreg" a2oDstDReg" = "a2oSrcDRegL" (X)"
	is a2oSig=0x10 & a2oOpc=0xa & a2oSrcDRegL & a2oDstDReg 
{
	a2oDstDReg = sext(a2oSrcDRegL);
}
ALU2op:^"MvDregLToDreg" a2oDstDReg" = "a2oSrcDRegL" (Z)"
	is a2oSig=0x10 & a2oOpc=0xb & a2oSrcDRegL & a2oDstDReg 
{
	a2oDstDReg = zext(a2oSrcDRegL);
}
ALU2op:^"MvDregBToDreg" a2oDstDReg" = "a2oSrcDRegB" (X)"
	is a2oSig=0x10 & a2oOpc=0xc & a2oSrcDRegB & a2oDstDReg 
{
	a2oDstDReg = sext(a2oSrcDRegB);
}
ALU2op:^"MvDregBToDreg" a2oDstDReg" = "a2oSrcDRegB" (Z)"
	is a2oSig=0x10 & a2oOpc=0xd & a2oSrcDRegB & a2oDstDReg 
{
	a2oDstDReg = zext(a2oSrcDRegB);
}
ALU2op:^"Neg32" a2oDstDReg" = -"a2oSrcDReg
	is a2oSig=0x10 & a2oOpc=0xe & a2oSrcDReg & a2oDstDReg 
{
	a2oDstDReg = -a2oSrcDReg;
}
ALU2op:^"Not32" a2oDstDReg" = ~"a2oSrcDReg
	is a2oSig=0x10 & a2oOpc=0xf & a2oSrcDReg & a2oDstDReg 
{
	a2oDstDReg = ~a2oSrcDReg;
}


All:^ALU2op is ALU2op { build ALU2op; }
