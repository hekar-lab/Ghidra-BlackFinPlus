## Load/Store indexed with small immediate offset FP (LdStIIFP)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 0 | 1 | 1 | 1 | 0 |.w.|........off........|.g.|....reg....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token lsfpInstr16 (16)
	lsfpSig          = (10,15) 
	lsfpW            = ( 9, 9) 
	lsfpOffUImm      = ( 4, 8) 
	lsfpG            = ( 3, 3) 
	lsfpRegDReg      = ( 0, 2) 
	lsfpRegPReg      = ( 0, 2) 
;


### Variables ###

attach variables lsfpRegDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables lsfpRegPReg [P0 P1 P2 P3 P4 P5 SP FP];


### Instructions ###

LdStIIFP:^"LdM32bitToDreg" lsfpRegDReg" = [FP - "imm"]"
	is lsfpSig=0x2e & lsfpW=0x0 & lsfpOffUImm & lsfpG=0x0 & lsfpRegDReg 
[
	imm = 0x80 - (lsfpOffUImm << 0x2);
] {
	lsfpRegDReg = *[ram]:4 (FP - imm);
}
LdStIIFP:^"LdM32bitToPreg" lsfpRegPReg" = [FP - "imm"]"
	is lsfpSig=0x2e & lsfpW=0x0 & lsfpOffUImm & lsfpG=0x1 & lsfpRegPReg 
[
	imm = 0x80 - (lsfpOffUImm << 0x2);
] {
	lsfpRegPReg = *[ram]:4 (FP - imm);
}
LdStIIFP:^"StDregToM32bit" "[FP - "imm"] = "lsfpRegDReg
	is lsfpSig=0x2e & lsfpW=0x1 & lsfpOffUImm & lsfpG=0x0 & lsfpRegDReg 
[
	imm = 0x80 - (lsfpOffUImm << 0x2);
] {
	*[ram]:4 (FP - imm) = lsfpRegDReg;
}
LdStIIFP:^"StPregToM32bit" "[FP - "imm"] = "lsfpRegPReg
	is lsfpSig=0x2e & lsfpW=0x1 & lsfpOffUImm & lsfpG=0x1 & lsfpRegPReg 
[
	imm = 0x80 - (lsfpOffUImm << 0x2);
] {
	*[ram]:4 (FP - imm) = lsfpRegPReg;
}


All:^LdStIIFP is LdStIIFP { build LdStIIFP; }
