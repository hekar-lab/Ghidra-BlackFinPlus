## Basic Program Sequencer Control Functions (ProgCtrl)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |......opc......|......reg......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token pgcInstr16 (16)
	pgcSig           = ( 8,15) 
	pgcOpc           = ( 4, 7) 
	pgcReg           = ( 0, 3) 
	pgcRegH          = ( 3, 3) 
	pgcDReg          = ( 0, 2) 
	pgcPReg          = ( 0, 2) 
;


### Variables ###

attach variables pgcDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables pgcPReg [P0 P1 P2 P3 P4 P5 SP FP];


### Operations ###

define pcodeop idle;
define pcodeop csync;
define pcodeop ssync;
define pcodeop emuexcpt;
define pcodeop raise;
define pcodeop excpt;


### Instructions ###

with returnDesc : pgcOpc=0x1{
: "RTS" is pgcReg=0x0 { return [RETS]; }
: "RTI" is pgcReg=0x1 { return [RETI]; }
: "RTX" is pgcReg=0x2 { return [RETX]; }
: "RTN" is pgcReg=0x3 { return [RETN]; }
: "RTE" is pgcReg=0x4 { return [RETE]; }
}

with syncDesc : pgcOpc=0x2{
: "IDLE"  is pgcReg=0x0 { idle(); }
: "CSYNC" is pgcReg=0x3 { csync(); }
: "SSYNC" is pgcReg=0x4 { ssync(); }
}

modeDesc: "EMUEXCPT" is pgcOpc=0x2 & pgcReg=0x5 { emuexcpt(); }

with ProgCtrl: pgcSig=0x00 {
: "Return" returnDesc is returnDesc { build returnDesc; }
: "Sync"   syncDesc   is syncDesc { build syncDesc; }
: "Mode"   modeDesc   is modeDesc { build modeDesc; }

with : pgcRegH=0x0 {
:"IMaskMv" "CLI" pgcDReg           is pgcOpc=0x3 & pgcDReg {
    local imaskAddr:4 = $(IMASK);
    pgcDReg = *[ram]:4 imaskAddr;
    *[ram]:4 imaskAddr = 0;
}
: "IMaskMv" "STI" pgcDReg           is pgcOpc=0x4 & pgcDReg {
    local imaskAddr:4 = $(IMASK);
    *[ram]:4 imaskAddr = pgcDReg;
}

: "Jump"    "JUMP" (pgcPReg)        is pgcOpc=0x5 & pgcPReg { goto [pgcPReg]; }
: "Call"    "CALL" (pgcPReg)        is pgcOpc=0x6 & pgcPReg { RETS = inst_next; call [pgcPReg]; }
: "Call"    "CALL" ("PC" + pgcPReg) is pgcOpc=0x7 & pgcPReg { RETS = inst_next; call [PC + pgcPReg]; }
: "Jump"    "JUMP" ("PC" + pgcPReg) is pgcOpc=0x8 & pgcPReg { goto [PC + pgcPReg]; }

: "TestSet" "TESTSET" (pgcPReg)     is pgcOpc=0xb & pgcPReg {
    local testVal = *[ram]:1 pgcPReg;
    CC = 0x0;
    if (testVal != 0x00) goto <is_set>;
    CC = 0x1;
    <is_set>
    *[ram]:1 pgcPReg = testVal | 0x80;
}
: "Sync"    "STI IDLE" pgcDReg      is pgcOpc=0xc & pgcDReg {
    local imaskAddr:4 = $(IMASK);
    *[ram]:4 imaskAddr = pgcDReg;
    idle();
}
}

: "Raise" "RAISE" pgcReg is pgcOpc=0x9 & pgcReg { raise(pgcReg:1); }
: "Raise" "EXCPT" pgcReg is pgcOpc=0xa & pgcReg { excpt(pgcReg:1); }
}


:^ProgCtrl is ProgCtrl { build ProgCtrl; }
