## Conditional Move (CCMV)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 0 | 0 | 0 | 0 | 0 | 1 | 1 |.t.|.d.|.s.|....dst....|....src....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token cmvInstr16 (16)
	cmvSig           = ( 9,15) 
	cmvT             = ( 8, 8) 
	cmvD             = ( 7, 7) 
	cmvS             = ( 6, 6) 
	cmvDstDReg       = ( 3, 5) 
	cmvDstPReg       = ( 3, 5) 
	cmvSrcDReg       = ( 0, 2) 
	cmvSrcPReg       = ( 0, 2) 
;


### Variables ###

attach variables [cmvDstDReg cmvSrcDReg] [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables [cmvDstPReg cmvSrcPReg] [P0 P1 P2 P3 P4 P5 SP FP];


### Instructions ###

GDST: cmvDstDReg is cmvD=0x0 & cmvDstDReg { export cmvDstDReg; }
GDST: cmvDstPReg is cmvD=0x1 & cmvDstPReg { export cmvDstPReg; }

GSRC: cmvSrcDReg is cmvS=0x0 & cmvSrcDReg { export cmvSrcDReg; }
GSRC: cmvSrcPReg is cmvS=0x1 & cmvSrcPReg { export cmvSrcPReg; }

with CCMV: cmvSig=0x03 {
:^"MvRegToRegCond" "if !CC" GDST = GSRC is cmvT=0x0 & GDST & GSRC {
    if (CC) goto <do_nothing>;
    GDST = GSRC;
<do_nothing>
}
:^"MvRegToRegCond" "if CC" GDST = GSRC  is cmvT=0x1 & GDST & GSRC {
    if (!CC) goto <do_nothing>;
    GDST = GSRC;
<do_nothing>
}
}


:^CCMV is CCMV { build CCMV; }