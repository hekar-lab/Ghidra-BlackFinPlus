# Push/Pop macros
macro push(reg) {
    SP = SP - 4;
    *[ram]:4 SP = reg;
}

macro pop(reg) {
    reg = *[ram]:4 SP;
    SP = SP + 4;
}

macro pushb(reg) {
    SP = SP - 4;
    *[ram]:4 SP = sext(reg);
}

macro popb(reg) {
    reg = *[ram]:1 SP;
    SP = SP + 4;
}

# Arithmetic macros
## Saturated binary operations 
### Unsigned
macro add_sat(dst, src0, src1) {
    if (carry(src0, src1)) goto <saturated>;
    dst = src0 + src1;
    goto <add_sat_end>;
<saturated>
    dst = ~0;
<add_sat_end>
}

macro sub_sat(dst, src0, src1) {
    if (src0 < src1) goto <saturated>;
    dst = src0 - src1;
    goto <sub_sat_end>;
<saturated>
    dst = 0;
<sub_sat_end>
}

macro trunc1_sat(dst, src) {
    if (zext(src:1) != src) goto <saturated>;
    dst = src:1;
    goto <trunc_sat_end>;
<saturated>
    dst = 0xff;
<trunc_sat_end>
}

macro trunc2_sat(dst, src) {
    if (zext(src:2) != src) goto <saturated>;
    dst = src:2;
    goto <trunc_sat_end>;
<saturated>
    dst = 0xffff;
<trunc_sat_end>
}

macro trunc4_sat(dst, src) {
    if (zext(src:4) == src) goto <saturated>;
    dst = src:4;
    goto <trunc_sat_end>;
<saturated>
    dst = 0xffffffff;
<trunc_sat_end>
}

macro trunc8_sat(dst, src) {
    if (zext(src:8) == src) goto <saturated>;
    dst = src:8;
    goto <trunc_sat_end>;
<saturated>
    dst = 0xffffffffffffffff;
<trunc_sat_end>
}

### Signed
macro sadd_sat(dst, src0, src1, size) {
    if (scarry(src0, src1)) goto <saturated>;
    dst = src0 + src1;
    goto <sadd_sat_end>;
<saturated>
    if (src1 s< 0) goto <negative>;
    dst = (1 << (size * 8 - 1)) - 1;
    goto <sadd_sat_end>;
<negative>
    dst = 1 << (size * 8 - 1);
<sadd_sat_end>
}

macro ssub_sat(dst, src0, src1, size) {
    if (sborrow(src0, src1)) goto <saturated>;
    dst = src0 - src1;
    goto <ssub_sat_end>;
<saturated>
    if (src1 s> 0) goto <negative>;
    dst = (1 << (size * 8 - 1)) - 1;
    goto <ssub_sat_end>;
<negative>
    dst = 1 << (size * 8 - 1);
<ssub_sat_end>
}

macro strunc2_sat(dst, src) {
    if (sext(src:2) != src) goto <saturated>;
    dst = src:2;
    goto <strunc_sat_end>;
<saturated>
    if (src s< 0) goto <negative>;
    dst = 0x7fff;
    goto <strunc_sat_end>;
<negative>
    dst = 0x8000;
<strunc_sat_end>
}

macro strunc4_sat(dst, src) {
    if (sext(src:4) != src) goto <saturated>;
    dst = src:4;
    goto <strunc_sat_end>;
<saturated>
    if (src s< 0) goto <negative>;
    dst = 0x7fffffff;
    goto <strunc_sat_end>;
<negative>
    dst = 0x80000000;
<strunc_sat_end>
}

macro strunc8_sat(dst, src) {
    if (sext(src:8) != src) goto <saturated>;
    dst = src:8;
    goto <strunc_sat_end>;
<saturated>
    if (src s< 0) goto <negative>;
    dst = 0x7fffffffffffffff;
    goto <strunc_sat_end>;
<negative>
    dst = 0x8000000000000000;
<strunc_sat_end>
}


## Saturated unary operations
macro abs_sat(dst, src, size) {
    if (src s< 0) goto <negative>;
    dst = src;
    goto <abs_end>;
<negative> 
    if (src == 1 << (size * 8 - 1)) goto <saturated>;
    dst = -src;
    goto <abs_end>;
<saturated>
    dst = (1 << (size * 8 - 1)) - 1;
<abs_end>
}

macro neg_sat(dst, src, size) {
    if (src == 1 << (size * 8 - 1)) goto <saturated>;
    dst = -src;
    goto <neg_end>;
<saturated>
    dst = (1 << (size * 8 - 1)) - 1;
<neg_end>
}


## Rounding
macro rounding(dst, src, rem_size) {
    local rem = src & ((1 << rem_size * 8) - 1);
    dst = src ^ rem;
    if (scarry(dst, 1 << rem_size * 8)) goto <round_end>;
    if (RND_MOD) goto <biased>;
    if (
        (rem > 1 << (rem_size * 8 - 1)) 
        || (
            (rem == 1 << (rem_size * 8 - 1)) 
            && ((dst & 1 << rem_size * 8) != 0)
        )
    ) goto <round_up>;
    goto <round_end>;
<biased>
    if (rem >= 1 << (rem_size * 8 - 1)) goto <round_up>;
    goto <round_end>;
<round_up>
    dst = dst + 1 << rem_size * 8;
<round_end>
}

macro round_biased(dst, src, rem_size) {
    local rem = src & ((1 << rem_size * 8) - 1);
    dst = src ^ rem;
    if (scarry(dst, 1 << rem_size * 8)) goto <round_end>;
    if (rem >= 1 << (rem_size * 8 - 1)) goto <round_up>;
    goto <round_end>;
<round_up>
    dst = dst + 1 << rem_size * 8;
<round_end>
}

macro round_trunc(dst, src, trunc_size) {
    dst = src & ~((1 << 8 * trunc_size) - 1);
}


## Min/Max
macro min(dst, src0, src1) {
    if (src1 s< src0) goto <src1_min>;
    dst = src0;
    goto <min_end>;
<src1_min>
    dst = src1;
<min_end>
}

macro max(dst, src0, src1) {
    if (src1 s> src0) goto <src1_max>;
    dst = src0;
    goto <max_end>;
<src1_max>
    dst = src1;
<max_end>
}


# Shifts
macro get_shift16(shft) {
    shft = ((shft & 0x1f) << 11) s>> 11;
}

macro get_shift32(shft) {
    shft = ((shft & 0x3f) << 10) s>> 10;
}

macro lshift(dst, src, shft) {
    if (shft == 0) goto <no_shift>;
    if (shft s> 0) goto <rshift>;
    dst = src << -shft;
    goto <shift_end>;
<rshift>
    dst = src >> shft;
    goto <shift_end>;
<no_shift>
    dst = src;
<shift_end>
}

macro ashift(dst, src, shft) {
    if (shft == 0) goto <no_shift>;
    if (shft s> 0) goto <rshift>;
    dst = src << -shft;
    goto <shift_end>;
<rshift>
    dst = src s>> shft;
    goto <shift_end>;
<no_shift>
    dst = src;
<shift_end>
}

macro ashift_sat(dst, src, shft, size) {
    if (shft == 0) goto <no_shift>;
    if (shft s> 0) goto <rshift>;
    if (src != ((src << shft) s>> shft)) goto <sat>;
    dst = src << -shft;
    goto <shift_end>;
<sat>
    dst = ~(((dst s>> (size * 8 - 2)) | 1) ^ (1 << (size * 8 - 1)));
    goto <shift_end>;
<rshift>
    dst = src s>> shft;
    goto <shift_end>;
<no_shift>
    dst = src;
<shift_end>
}

macro rot(dst, src, shft, size) {
    local bit = src;
    if (shft == 0) goto <no_rot>;
    if (shft s> 0) goto <rrot>;
    dst = (src << -shft) | (zext(CC) << (-shft - 1)) | (src >> (8 * size + shft + 1));
    bit = (src >> (8 * size + shft)) & 0x1; CC = bit:1; 
    goto <rot_end>;
<rrot>
    dst = (src << (8 * size - shft + 1)) | (zext(CC) << (8 * size - shft)) | (src >> shft);
    bit = (src >> (shft - 1)) & 0x1; CC = bit:1; 
    goto <rot_end>;
<no_rot>
    dst = src;
<rot_end>
}


# Misc
## SignBits
macro sgnbits(dst, src) {
    if (src s< 0) goto <negative>;
    dst = lzcount(src) - 1;
    goto <sb_end>;
<negative>
    dst = lzcount(~src) - 1;
<sb_end>
}

#VitMax
macro vitmaxl(dst, src0, src1) {
    if ((src0 - src1) s< 0) goto <src1_greater>;
    dst = src0;
    A0.W = A0.W << 1;
    goto <vitmax_end>;
<src1_greater>
    dst = src1;
    A0.W = (A0.W << 1) | 0x1;
<vitmax_end>
}

macro vitmaxr(dst, src0, src1) {
    if ((src0 - src1) s< 0) goto <src1_greater>;
    dst = src0;
    A0.W = A0.W >> 1;
    goto <vitmax_end>;
<src1_greater>
    dst = src1;
    A0.W = (A0.W >> 1) | 0x80000000;
<vitmax_end>
}