### Instructions for Dsp32Mac: TradM1IS ###

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	dmcDstA1DRegH = results_A1:2;
	if (sext(dmcDstA1DRegH) == results_A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (results_A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"MvA1ToDregH" dmcDstA1DRegH" = A1 (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH 
{
	dmcDstA1DRegH = A1:2;
	if (sext(dmcDstA1DRegH) == A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"MvA1ToDregH" dmcDstA1DRegH" = A1 (M, IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x0 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH 
{
	dmcDstA1DRegH = A1:2;
	if (sext(dmcDstA1DRegH) == A1) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (A1 s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 = "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x0 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	A0 = results_A0;
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 += "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x1 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 + results_A0;
	if (!scarry(sadd_src0_cpy_A0accOp, results_A0)) goto <end_sadd_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s< 0x0) goto <end_sadd_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegL" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x0 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegL & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegL) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegL & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegL") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x0 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegL);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"Mac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegL & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegL 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMac16WithMv" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc0A1DRegH & dmcSrc1A0DRegH & dmcSrc1A1DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMac16WithMvAndMvA1ToDregH" dmcDstA0DRegL" = (A0 -= "dmcSrc0A0DRegH" * "dmcSrc1A0DRegH") (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x2 & dmcH00=0x1 & dmcH10=0x1 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A0DRegH & dmcSrc1A0DRegH 
{
	local results_A0:5 = sext(dmcSrc0A0DRegH) * sext(dmcSrc1A0DRegH);
	local sadd_src0_cpy_A0accOp:5 = A0;
	A0 = A0 - results_A0;
	if (!sborrow(sadd_src0_cpy_A0accOp, results_A0)) goto <end_ssub_sat_A0accOp>;
	A0 = (0x1 << 0x27);
	if (results_A0 s> 0x0) goto <end_ssub_sat_A0accOp>;
	A0 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A0accOp>
	dmcDstA0DRegL = results_A0:2;
	if (sext(dmcDstA0DRegL) == results_A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (results_A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"MvA0ToDregL" dmcDstA0DRegL" = A0 (IS)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcP=0x0 & dmcW1=0x0 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 = "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x0 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	A1 = results_A1;
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 += "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x1 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 + results_A1;
	if (!scarry(sadd_src0_cpy_A1accOp, results_A1)) goto <end_sadd_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s< 0x0) goto <end_sadd_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_sadd_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegL" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x0 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegL & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegL) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegL") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x0 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegL 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegL);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH")"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = sext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	results_A1 = results_A1 << 0x1;
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvA0ToDregLAndMac16WithMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = (A1 -= "dmcSrc0A1DRegH" * "dmcSrc1A1DRegH") (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x2 
	 ; dmcH01=0x1 & dmcH11=0x1 & dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH & dmcSrc0A1DRegH & dmcSrc1A1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local results_A1:5 = zext(dmcSrc0A1DRegH) * sext(dmcSrc1A1DRegH);
	local sadd_src0_cpy_A1accOp:5 = A1;
	A1 = A1 - results_A1;
	if (!sborrow(sadd_src0_cpy_A1accOp, results_A1)) goto <end_ssub_sat_A1accOp>;
	A1 = (0x1 << 0x27);
	if (results_A1 s> 0x0) goto <end_ssub_sat_A1accOp>;
	A1 = ((0x1 << 0x27) - 0x1);
<end_ssub_sat_A1accOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = results_A1:2;
	tmp_rnd_A1extrOp = results_A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvAndMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = A1"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x0 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}

Dsp32MacTradM1IS:^"ParaMvAndMv" dmcDstA0DRegL" = A0 (IS), "dmcDstA1DRegH" = A1 (M)"
	is dmcSigDsp=0xc & dmcSig=0x0 & dmcMmod=0x8 & dmcMm=0x1 & dmcP=0x0 & dmcW1=0x1 & dmcOp1=0x3 
	 ; dmcW0=0x1 & dmcOp0=0x3 & dmcDstA0DRegL & dmcDstA1DRegH 
{
	dmcDstA0DRegL = A0:2;
	if (sext(dmcDstA0DRegL) == A0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = (0x1 << 0xf);
	if (A0 s< 0x0) goto <end_strunc_A0extrOp>;
	dmcDstA0DRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_A0extrOp>
	local tmp_rnd_A1extrOp:3;
	local rem_var_A1extrOp:2 = A1:2;
	tmp_rnd_A1extrOp = A1(2);
	if (tmp_rnd_A1extrOp == ((0x1 << 0x17) - 0x1)) goto <end_rnd_A1extrOp>;
	if (RND_MOD) goto <biased_rnd_A1extrOp>;
	if (rem_var_A1extrOp > 0x8000 || (rem_var_A1extrOp == 0x8000 && (tmp_rnd_A1extrOp & 0x1) == 0x1)) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<biased_rnd_A1extrOp>
	if (rem_var_A1extrOp >= 0x8000) goto <rounding_A1extrOp>;
	goto <end_rnd_A1extrOp>;
<rounding_A1extrOp>
	tmp_rnd_A1extrOp = tmp_rnd_A1extrOp + 0x1;
<end_rnd_A1extrOp>
	dmcDstA1DRegH = tmp_rnd_A1extrOp:2;
	if (sext(dmcDstA1DRegH) == tmp_rnd_A1extrOp) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = (0x1 << 0xf);
	if (tmp_rnd_A1extrOp s< 0x0) goto <end_strunc_A1extrOp>;
	dmcDstA1DRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_A1extrOp>
}



:^Dsp32MacTradM1IS is dmcM=0x0 ... & Dsp32MacTradM1IS { build Dsp32MacTradM1IS; }
:^Dsp32MacTradM1IS is dmcM=0x1 ... & Dsp32MacTradM1IS { build Dsp32MacTradM1IS; delayslot(4); }
