## Long Load/Store with indexed addressing (LdStIdxI)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 1 | 1 | 0 | 0 | 1 |.w.|.z.|..sz...|....ptr....|....reg....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## |..............................off..............................|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token lidInstr16 (16)
	lidSig           = (10,15) 
	lidW             = ( 9, 9) 
	lidZ             = ( 8, 8) 
	lidSz            = ( 6, 7) 
	lidPtrPReg       = ( 3, 5) 
	lidRegDReg       = ( 0, 2) 
	lidRegPReg       = ( 0, 2) 
;

define token lidInstr32 (16)
	lidOffSImm       = ( 0,15) signed
;


### Variables ###

attach variables lidRegDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables lidRegPReg [P0 P1 P2 P3 P4 P5 SP FP];
attach variables lidPtrPReg [P0 P1 P2 P3 P4 P5 SP FP];


### Instructions ###

LdStIdxI:^"LdM32bitToDreg" lidRegDReg" = ["lidPtrPReg" + "imm4"]"
	is lidSig=0x39 & lidW=0x0 & lidZ=0x0 & lidSz=0x0 & lidPtrPReg & lidRegDReg 
	 ; lidOffSImm 
[
	imm4 = lidOffSImm * 0x4;
] {
	lidRegDReg = *[ram]:4 (lidPtrPReg + imm4);
}

LdStIdxI:^"LdM32bitToPreg" lidRegPReg" = ["lidPtrPReg" + "imm4"]"
	is lidSig=0x39 & lidW=0x0 & lidZ=0x1 & lidSz=0x0 & lidPtrPReg & lidRegPReg 
	 ; lidOffSImm 
[
	imm4 = lidOffSImm * 0x4;
] {
	lidRegPReg = *[ram]:4 (lidPtrPReg + imm4);
}

LdStIdxI:^"LdM16bitToDreg" lidRegDReg" = W["lidPtrPReg" + "imm2"] (Z)"
	is lidSig=0x39 & lidW=0x0 & lidZ=0x0 & lidSz=0x1 & lidPtrPReg & lidRegDReg 
	 ; lidOffSImm 
[
	imm2 = lidOffSImm * 0x2;
] {
	lidRegDReg = zext(*[ram]:2 (lidPtrPReg + imm2));
}

LdStIdxI:^"LdM16bitToDreg" lidRegDReg" = W["lidPtrPReg" + "imm2"] (X)"
	is lidSig=0x39 & lidW=0x0 & lidZ=0x1 & lidSz=0x1 & lidPtrPReg & lidRegDReg 
	 ; lidOffSImm 
[
	imm2 = lidOffSImm * 0x2;
] {
	lidRegDReg = sext(*[ram]:2 (lidPtrPReg + imm2));
}

LdStIdxI:^"LdM08bitToDreg" lidRegDReg" = B["lidPtrPReg" + "lidOffSImm"] (Z)"
	is lidSig=0x39 & lidW=0x0 & lidZ=0x0 & lidSz=0x2 & lidPtrPReg & lidRegDReg 
	 ; lidOffSImm 
{
	lidRegDReg = zext(*[ram]:1 (lidPtrPReg + lidOffSImm));
}

LdStIdxI:^"LdM08bitToDreg" lidRegDReg" = B["lidPtrPReg" + "lidOffSImm"] (X)"
	is lidSig=0x39 & lidW=0x0 & lidZ=0x1 & lidSz=0x2 & lidPtrPReg & lidRegDReg 
	 ; lidOffSImm 
{
	lidRegDReg = sext(*[ram]:1 (lidPtrPReg + lidOffSImm));
}

LdStIdxI:^"StDregToM32bit" "["lidPtrPReg" + "imm4"] = "lidRegDReg
	is lidSig=0x39 & lidW=0x1 & lidZ=0x0 & lidSz=0x0 & lidPtrPReg & lidRegDReg 
	 ; lidOffSImm 
[
	imm4 = lidOffSImm * 0x4;
] {
	*[ram]:4 (lidPtrPReg + imm4) = lidRegDReg:4;
}

LdStIdxI:^"StPregToM32bit" "["lidPtrPReg" + "imm4"] = "lidRegPReg
	is lidSig=0x39 & lidW=0x1 & lidZ=0x1 & lidSz=0x0 & lidPtrPReg & lidRegPReg 
	 ; lidOffSImm 
[
	imm4 = lidOffSImm * 0x4;
] {
	*[ram]:4 (lidPtrPReg + imm4) = lidRegPReg:4;
}

LdStIdxI:^"StDregLToM16bit" "W["lidPtrPReg" + "imm2"] = "lidRegDReg
	is lidSig=0x39 & lidW=0x1 & lidZ=0x0 & lidSz=0x1 & lidPtrPReg & lidRegDReg 
	 ; lidOffSImm 
[
	imm2 = lidOffSImm * 0x2;
] {
	*[ram]:2 (lidPtrPReg + imm2) = lidRegDReg:2;
}

LdStIdxI:^"StDregToM08bit" "B["lidPtrPReg" + "lidOffSImm"] = "lidRegDReg
	is lidSig=0x39 & lidW=0x1 & lidZ=0x0 & lidSz=0x2 & lidPtrPReg & lidRegDReg 
	 ; lidOffSImm 
{
	*[ram]:1 (lidPtrPReg + lidOffSImm) = lidRegDReg:1;
}



:^LdStIdxI is LdStIdxI { build LdStIdxI; }
