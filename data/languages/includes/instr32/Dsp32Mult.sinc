## Multiply with 3 operands (Dsp32Mult)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 1 | 0 | 0 |.m.| 0 | 1 |.....mmod......|mm.|.p.|w1.|..op1..|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## |h01|h11|w0.|..op0..|h00|h10|....dst....|...src0....|...src1....|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

### Tokens ###

define token dmtInstr16 (16)
	dmtSigDsp        = (12,15) 
	dmtM             = (11,11) 
	dmtSig           = ( 9,10) 
	dmtMmod          = ( 5, 8) 
	dmtMm            = ( 4, 4) 
	dmtP             = ( 3, 3) 
	dmtW1            = ( 2, 2) 
	dmtOp1           = ( 0, 1) 
;

define token dmtInstr32 (16)
	dmtH01           = (15,15) 
	dmtH11           = (14,14) 
	dmtW0            = (13,13) 
	dmtOp0           = (11,12) 
	dmtH00           = (10,10) 
	dmtH10           = ( 9, 9) 
	dmtDstDReg       = ( 6, 8) 
	dmtDstDRegPair   = ( 6, 8) 
	dmtDstHDRegH     = ( 6, 8) 
	dmtDstHDRegO     = ( 6, 8) 
	dmtDstLDRegL     = ( 6, 8) 
	dmtDstLDRegE     = ( 6, 8) 
	dmtSrc0DReg      = ( 3, 5) 
	dmtSrc0HDRegL    = ( 3, 5) 
	dmtSrc0HDRegH    = ( 3, 5) 
	dmtSrc0LDRegL    = ( 3, 5) 
	dmtSrc0LDRegH    = ( 3, 5) 
	dmtSrc1DReg      = ( 0, 2) 
	dmtSrc1HDRegL    = ( 0, 2) 
	dmtSrc1HDRegH    = ( 0, 2) 
	dmtSrc1LDRegL    = ( 0, 2) 
	dmtSrc1LDRegH    = ( 0, 2) 
;


### Variables ###

attach variables dmtDstDReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables dmtSrc1DReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables dmtSrc0DReg [R0 R1 R2 R3 R4 R5 R6 R7];
attach variables dmtSrc1LDRegL [R0.L R1.L R2.L R3.L R4.L R5.L R6.L R7.L];
attach variables dmtSrc0HDRegL [R0.L R1.L R2.L R3.L R4.L R5.L R6.L R7.L];
attach variables dmtSrc0LDRegL [R0.L R1.L R2.L R3.L R4.L R5.L R6.L R7.L];
attach variables dmtSrc1HDRegL [R0.L R1.L R2.L R3.L R4.L R5.L R6.L R7.L];
attach variables dmtDstLDRegL [R0.L R1.L R2.L R3.L R4.L R5.L R6.L R7.L];
attach variables dmtSrc1HDRegH [R0.H R1.H R2.H R3.H R4.H R5.H R6.H R7.H];
attach variables dmtSrc1LDRegH [R0.H R1.H R2.H R3.H R4.H R5.H R6.H R7.H];
attach variables dmtSrc0HDRegH [R0.H R1.H R2.H R3.H R4.H R5.H R6.H R7.H];
attach variables dmtSrc0LDRegH [R0.H R1.H R2.H R3.H R4.H R5.H R6.H R7.H];
attach variables dmtDstHDRegH [R0.H R1.H R2.H R3.H R4.H R5.H R6.H R7.H];
attach variables dmtDstLDRegE [R0 _ R2 _ R4 _ R6 _];
attach variables dmtDstHDRegO [R1 _ R3 _ R5 _ R7 _];
attach variables dmtDstDRegPair [R10 R10 R32 R32 R54 R54 R76 R76];


### Instructions ###

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = tmp_2x_src_Low:2;
	tmp_rnd_Low = tmp_2x_src_Low(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	local tmp_rnd_High:3;
	local rem_var_High:2 = tmp_2x_src_High:2;
	tmp_rnd_High = tmp_2x_src_High(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (T), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (sext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_rnd_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (sext(dmtDstHDRegH) == tmp_rnd_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_rnd_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	local rem_var_Low:2 = resL:2;
	tmp_rnd_Low = resL(2);
	if (tmp_rnd_Low == ((0x1 << 0x17) - 0x1)) goto <end_rnd_Low>;
	if (RND_MOD) goto <biased_rnd_Low>;
	if (rem_var_Low > 0x8000 || (rem_var_Low == 0x8000 && (tmp_rnd_Low & 0x1) == 0x1)) goto <rounding_Low>;
	goto <end_rnd_Low>;
<biased_rnd_Low>
	if (rem_var_Low >= 0x8000) goto <rounding_Low>;
	goto <end_rnd_Low>;
<rounding_Low>
	tmp_rnd_Low = tmp_rnd_Low + 0x1;
<end_rnd_Low>
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	local rem_var_High:2 = resH:2;
	tmp_rnd_High = resH(2);
	if (tmp_rnd_High == ((0x1 << 0x17) - 0x1)) goto <end_rnd_High>;
	if (RND_MOD) goto <biased_rnd_High>;
	if (rem_var_High > 0x8000 || (rem_var_High == 0x8000 && (tmp_rnd_High & 0x1) == 0x1)) goto <rounding_High>;
	goto <end_rnd_High>;
<biased_rnd_High>
	if (rem_var_High >= 0x8000) goto <rounding_High>;
	goto <end_rnd_High>;
<rounding_High>
	tmp_rnd_High = tmp_rnd_High + 0x1;
<end_rnd_High>
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (TFU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	local tmp_rnd_Low:3;
	tmp_rnd_Low = resL(2);
	dmtDstLDRegL = tmp_rnd_Low:2;
	if (zext(dmtDstLDRegL) == tmp_rnd_Low) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_rnd_High:3;
	tmp_rnd_High = resH(2);
	dmtDstHDRegH = tmp_rnd_High:2;
	if (zext(dmtDstHDRegH) == tmp_rnd_High) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegL = tmp_2x_src_Low:2;
	if (sext(dmtDstLDRegL) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegH = tmp_2x_src_High:2;
	if (sext(dmtDstHDRegH) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IH), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (sext(dmtDstLDRegL) == resL) goto <end_strunc_Low>;
	dmtDstLDRegL = (0x1 << 0xf);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegL = ((0x1 << 0xf) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (sext(dmtDstHDRegH) == resH) goto <end_strunc_High>;
	dmtDstHDRegH = (0x1 << 0xf);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegH = ((0x1 << 0xf) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegL" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegH" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegL & dmtDstHDRegH & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegL = resL:2;
	if (zext(dmtDstLDRegL) == resL) goto <end_trunc_Low>;
	dmtDstLDRegL = ((0x1 << 0x10) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegH = resH:2;
	if (zext(dmtDstHDRegH) == resH) goto <end_trunc_High>;
	dmtDstHDRegH = ((0x1 << 0x10) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M, IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * zext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M, IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegL & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M, IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegL 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * zext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M, IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x0 & dmtOp0=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0HDRegH & dmtSrc1HDRegH 
{
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegL) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegL" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x0 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegL & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegL) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegL);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegL" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x0 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegL & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegL);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
}

Dsp32Mult:^"Mult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x0 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc1LDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegL" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x0 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegL & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegL) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegL" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x0 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegL 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegL);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH", "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (S2RND), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	resL = resL << 0x1;
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (FU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IS), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (sext(dmtDstLDRegE) == resL) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (resL s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (sext(dmtDstHDRegO) == resH) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (resH s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (ISS2), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = sext(dmtSrc0LDRegH) * sext(dmtSrc1LDRegH);
	local tmp_2x_src_Low:5;
	tmp_2x_src_Low = resL * 0x2;
	dmtDstLDRegE = tmp_2x_src_Low:4;
	if (sext(dmtDstLDRegE) == tmp_2x_src_Low) goto <end_strunc_Low>;
	dmtDstLDRegE = (0x1 << 0x1f);
	if (tmp_2x_src_Low s< 0x0) goto <end_strunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x1f) - 0x1);
<end_strunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	local tmp_2x_src_High:5;
	tmp_2x_src_High = resH * 0x2;
	dmtDstHDRegO = tmp_2x_src_High:4;
	if (sext(dmtDstHDRegO) == tmp_2x_src_High) goto <end_strunc_High>;
	dmtDstHDRegO = (0x1 << 0x1f);
	if (tmp_2x_src_High s< 0x0) goto <end_strunc_High>;
	dmtDstHDRegO = ((0x1 << 0x1f) - 0x1);
<end_strunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = sext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	resH = resH << 0x1;
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"ParaMult16AndMult16" dmtDstLDRegE" = "dmtSrc0LDRegH" * "dmtSrc1LDRegH" (IU), "dmtDstHDRegO" = "dmtSrc0HDRegH" * "dmtSrc1HDRegH" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xc & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x1 & dmtOp1=0x0 
	 ; dmtH01=0x1 & dmtH11=0x1 & dmtW0=0x1 & dmtOp0=0x0 & dmtH00=0x1 & dmtH10=0x1 & dmtDstLDRegE & dmtDstHDRegO & dmtSrc0LDRegH & dmtSrc0HDRegH & dmtSrc1LDRegH & dmtSrc1HDRegH 
{
	local resL:5 = zext(dmtSrc0LDRegH) * zext(dmtSrc1LDRegH);
	dmtDstLDRegE = resL:4;
	if (zext(dmtDstLDRegE) == resL) goto <end_trunc_Low>;
	dmtDstLDRegE = ((0x1 << 0x20) - 0x1);
<end_trunc_Low>
	local resH:5 = zext(dmtSrc0HDRegH) * sext(dmtSrc1HDRegH);
	dmtDstHDRegO = resH:4;
	if (zext(dmtDstHDRegO) == resH) goto <end_trunc_High>;
	dmtDstHDRegO = ((0x1 << 0x20) - 0x1);
<end_trunc_High>
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg" (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg" (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg" (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = ((0x1 << 0x48) - 0x1);
	if (carry(A10_var, result_var)) goto <end_add_sat_Mac32>;
	A10_var = A10_var + result_var;
<end_add_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = ((0x1 << 0x48) - 0x1);
	if (carry(A10_var, result_var)) goto <end_add_sat_Mac32>;
	A10_var = A10_var + result_var;
<end_add_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg" (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg" (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = 0x0;
	if ((A10_var < result_var)) goto <end_sub_sat_Mac32>;
	A10_var = A10_var - result_var;
<end_sub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = 0x0;
	if ((A10_var < result_var)) goto <end_sub_sat_Mac32>;
	A10_var = A10_var - result_var;
<end_sub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg" (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"Mac32" dmtDstDReg" = A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x0 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (sext(dmtDstDReg) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x5 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (zext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (zext(dmtDstDReg) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (sext(dmtDstDReg) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (sext(dmtDstDReg) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x5 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = ((0x1 << 0x48) - 0x1);
	if (carry(A10_var, result_var)) goto <end_add_sat_Mac32>;
	A10_var = A10_var + result_var;
<end_add_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (zext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = ((0x1 << 0x48) - 0x1);
	if (carry(A10_var, result_var)) goto <end_add_sat_Mac32>;
	A10_var = A10_var + result_var;
<end_add_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (zext(dmtDstDReg) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (sext(dmtDstDReg) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (sext(dmtDstDReg) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x5 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = 0x0;
	if ((A10_var < result_var)) goto <end_sub_sat_Mac32>;
	A10_var = A10_var - result_var;
<end_sub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (zext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = 0x0;
	if ((A10_var < result_var)) goto <end_sub_sat_Mac32>;
	A10_var = A10_var - result_var;
<end_sub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (zext(dmtDstDReg) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
	if (sext(dmtDstDReg) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDReg" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local tmp_rnd_Mac32:5;
	local rem_var_Mac32:4 = A10_var:4;
	tmp_rnd_Mac32 = A10_var(4);
	if (tmp_rnd_Mac32 == ((0x1 << 0x27) - 0x1)) goto <end_rnd_Mac32>;
	if (RND_MOD) goto <biased_rnd_Mac32>;
	if (rem_var_Mac32 > 0x80000000 || (rem_var_Mac32 == 0x80000000 && (tmp_rnd_Mac32 & 0x1) == 0x1)) goto <rounding_Mac32>;
	goto <end_rnd_Mac32>;
<biased_rnd_Mac32>
	if (rem_var_Mac32 >= 0x80000000) goto <rounding_Mac32>;
	goto <end_rnd_Mac32>;
<rounding_Mac32>
	tmp_rnd_Mac32 = tmp_rnd_Mac32 + 0x1;
<end_rnd_Mac32>
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDReg = A10_var:4;
	if (sext(dmtDstDReg) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local tmp_rnd_Mac32:5;
	local rem_var_Mac32:4 = A10_var:4;
	tmp_rnd_Mac32 = A10_var(4);
	if (tmp_rnd_Mac32 == ((0x1 << 0x27) - 0x1)) goto <end_rnd_Mac32>;
	if (RND_MOD) goto <biased_rnd_Mac32>;
	if (rem_var_Mac32 > 0x80000000 || (rem_var_Mac32 == 0x80000000 && (tmp_rnd_Mac32 & 0x1) == 0x1)) goto <rounding_Mac32>;
	goto <end_rnd_Mac32>;
<biased_rnd_Mac32>
	if (rem_var_Mac32 >= 0x80000000) goto <rounding_Mac32>;
	goto <end_rnd_Mac32>;
<rounding_Mac32>
	tmp_rnd_Mac32 = tmp_rnd_Mac32 + 0x1;
<end_rnd_Mac32>
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (zext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x5 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (zext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDReg = A10_var:4;
	if (zext(dmtDstDReg) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local tmp_rnd_Mac32:5;
	local rem_var_Mac32:4 = A10_var:4;
	tmp_rnd_Mac32 = A10_var(4);
	if (tmp_rnd_Mac32 == ((0x1 << 0x27) - 0x1)) goto <end_rnd_Mac32>;
	if (RND_MOD) goto <biased_rnd_Mac32>;
	if (rem_var_Mac32 > 0x80000000 || (rem_var_Mac32 == 0x80000000 && (tmp_rnd_Mac32 & 0x1) == 0x1)) goto <rounding_Mac32>;
	goto <end_rnd_Mac32>;
<biased_rnd_Mac32>
	if (rem_var_Mac32 >= 0x80000000) goto <rounding_Mac32>;
	goto <end_rnd_Mac32>;
<rounding_Mac32>
	tmp_rnd_Mac32 = tmp_rnd_Mac32 + 0x1;
<end_rnd_Mac32>
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local tmp_rnd_Mac32:5;
	tmp_rnd_Mac32 = A10_var(4);
	dmtDstDReg = tmp_rnd_Mac32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mac32) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mac32 s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDReg = A10_var:4;
	if (sext(dmtDstDReg) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDReg" = A1:0 (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDReg = A10_var:4;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg")"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (zext(dmtDstDRegPair) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (zext(dmtDstDRegPair) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 = "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg")"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = ((0x1 << 0x48) - 0x1);
	if (carry(A10_var, result_var)) goto <end_add_sat_Mac32>;
	A10_var = A10_var + result_var;
<end_add_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (zext(dmtDstDRegPair) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = ((0x1 << 0x48) - 0x1);
	if (carry(A10_var, result_var)) goto <end_add_sat_Mac32>;
	A10_var = A10_var + result_var;
<end_add_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (zext(dmtDstDRegPair) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var + result_var;
	if (!scarry(sadd_src0_cpy_Mac32, result_var)) goto <end_sadd_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s< 0x0) goto <end_sadd_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_sadd_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 += "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x1 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var + result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg")"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_var = result_var << 0x1;
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = 0x0;
	if ((A10_var < result_var)) goto <end_sub_sat_Mac32>;
	A10_var = A10_var - result_var;
<end_sub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (zext(dmtDstDRegPair) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = 0x0;
	if ((A10_var < result_var)) goto <end_sub_sat_Mac32>;
	A10_var = A10_var - result_var;
<end_sub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (zext(dmtDstDRegPair) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local sadd_src0_cpy_Mac32:9 = A10_var;
	A10_var = A10_var - result_var;
	if (!sborrow(sadd_src0_cpy_Mac32, result_var)) goto <end_ssub_sat_Mac32>;
	A10_var = (0x1 << 0x47);
	if (result_var s> 0x0) goto <end_ssub_sat_Mac32>;
	A10_var = ((0x1 << 0x47) - 0x1);
<end_ssub_sat_Mac32>
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"MvAxToDreg" dmtDstDRegPair" = (A1:0 -= "dmtSrc0DReg" * "dmtSrc1DReg") (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x2 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	local result_var:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	A10_var = A10_var - result_var;
	A1 = A10_var(4);
	A0.W = A10_var:4;
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0 (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0 (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0 (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
	if (zext(dmtDstDRegPair) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0 (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
	if (zext(dmtDstDRegPair) == A10_var) goto <end_trunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0 (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0 (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0 (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
	if (sext(dmtDstDRegPair) == A10_var) goto <end_strunc_Mac32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (A10_var s< 0x0) goto <end_strunc_Mac32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mac32>
}

Dsp32Mult:^"Mac32WithMv" dmtDstDRegPair" = A1:0 (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x0 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x3 & dmtDstDRegPair 
{
	local A10_var:9 = (zext(A1) << 0x20) | zext(A0.W);
	dmtDstDRegPair = A10_var:8;
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_mult32 = result_mult32 << 0x1;
	local tmp_rnd_Mult32:5;
	local rem_var_Mult32:4 = result_mult32:4;
	tmp_rnd_Mult32 = result_mult32(4);
	if (tmp_rnd_Mult32 == ((0x1 << 0x27) - 0x1)) goto <end_rnd_Mult32>;
	if (RND_MOD) goto <biased_rnd_Mult32>;
	if (rem_var_Mult32 > 0x80000000 || (rem_var_Mult32 == 0x80000000 && (tmp_rnd_Mult32 & 0x1) == 0x1)) goto <rounding_Mult32>;
	goto <end_rnd_Mult32>;
<biased_rnd_Mult32>
	if (rem_var_Mult32 >= 0x80000000) goto <rounding_Mult32>;
	goto <end_rnd_Mult32>;
<rounding_Mult32>
	tmp_rnd_Mult32 = tmp_rnd_Mult32 + 0x1;
<end_rnd_Mult32>
	dmtDstDReg = tmp_rnd_Mult32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mult32) goto <end_strunc_Mult32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x1 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_mult32 = result_mult32 << 0x1;
	local tmp_rnd_Mult32:5;
	tmp_rnd_Mult32 = result_mult32(4);
	dmtDstDReg = tmp_rnd_Mult32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mult32) goto <end_strunc_Mult32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDReg = result_mult32:4;
	if (sext(dmtDstDReg) == result_mult32) goto <end_strunc_Mult32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (result_mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDReg = result_mult32:4;
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	local tmp_rnd_Mult32:5;
	local rem_var_Mult32:4 = result_mult32:4;
	tmp_rnd_Mult32 = result_mult32(4);
	if (tmp_rnd_Mult32 == ((0x1 << 0x27) - 0x1)) goto <end_rnd_Mult32>;
	if (RND_MOD) goto <biased_rnd_Mult32>;
	if (rem_var_Mult32 > 0x80000000 || (rem_var_Mult32 == 0x80000000 && (tmp_rnd_Mult32 & 0x1) == 0x1)) goto <rounding_Mult32>;
	goto <end_rnd_Mult32>;
<biased_rnd_Mult32>
	if (rem_var_Mult32 >= 0x80000000) goto <rounding_Mult32>;
	goto <end_rnd_Mult32>;
<rounding_Mult32>
	tmp_rnd_Mult32 = tmp_rnd_Mult32 + 0x1;
<end_rnd_Mult32>
	dmtDstDReg = tmp_rnd_Mult32:4;
	if (zext(dmtDstDReg) == tmp_rnd_Mult32) goto <end_trunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (TFU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x5 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	local tmp_rnd_Mult32:5;
	tmp_rnd_Mult32 = result_mult32(4);
	dmtDstDReg = tmp_rnd_Mult32:4;
	if (zext(dmtDstDReg) == tmp_rnd_Mult32) goto <end_trunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	dmtDstDReg = result_mult32:4;
	if (zext(dmtDstDReg) == result_mult32) goto <end_trunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x20) - 0x1);
<end_trunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	dmtDstDReg = result_mult32:4;
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local tmp_rnd_Mult32:5;
	local rem_var_Mult32:4 = result_mult32:4;
	tmp_rnd_Mult32 = result_mult32(4);
	if (tmp_rnd_Mult32 == ((0x1 << 0x27) - 0x1)) goto <end_rnd_Mult32>;
	if (RND_MOD) goto <biased_rnd_Mult32>;
	if (rem_var_Mult32 > 0x80000000 || (rem_var_Mult32 == 0x80000000 && (tmp_rnd_Mult32 & 0x1) == 0x1)) goto <rounding_Mult32>;
	goto <end_rnd_Mult32>;
<biased_rnd_Mult32>
	if (rem_var_Mult32 >= 0x80000000) goto <rounding_Mult32>;
	goto <end_rnd_Mult32>;
<rounding_Mult32>
	tmp_rnd_Mult32 = tmp_rnd_Mult32 + 0x1;
<end_rnd_Mult32>
	dmtDstDReg = tmp_rnd_Mult32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mult32) goto <end_strunc_Mult32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (M, T)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x9 & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	local tmp_rnd_Mult32:5;
	tmp_rnd_Mult32 = result_mult32(4);
	dmtDstDReg = tmp_rnd_Mult32:4;
	if (sext(dmtDstDReg) == tmp_rnd_Mult32) goto <end_strunc_Mult32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (tmp_rnd_Mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDReg = result_mult32:4;
	if (sext(dmtDstDReg) == result_mult32) goto <end_strunc_Mult32>;
	dmtDstDReg = (0x1 << 0x1f);
	if (result_mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDReg = ((0x1 << 0x1f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDReg" = "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x0 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDReg & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDReg = result_mult32:4;
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x0 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	result_mult32 = result_mult32 << 0x1;
	dmtDstDRegPair = result_mult32:8;
	if (sext(dmtDstDRegPair) == result_mult32) goto <end_strunc_Mult32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (result_mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg" (IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x2 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDRegPair = result_mult32:8;
	if (sext(dmtDstDRegPair) == result_mult32) goto <end_strunc_Mult32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (result_mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg" (IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x3 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = sext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDRegPair = result_mult32:8;
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg" (FU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x4 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	dmtDstDRegPair = result_mult32:8;
	if (zext(dmtDstDRegPair) == result_mult32) goto <end_trunc_Mult32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg" (IU)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x6 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	dmtDstDRegPair = result_mult32:8;
	if (zext(dmtDstDRegPair) == result_mult32) goto <end_trunc_Mult32>;
	dmtDstDRegPair = ((0x1 << 0x40) - 0x1);
<end_trunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg" (IU, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x7 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * zext(dmtSrc1DReg);
	dmtDstDRegPair = result_mult32:8;
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg" (M)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0x8 & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDRegPair = result_mult32:8;
	if (sext(dmtDstDRegPair) == result_mult32) goto <end_strunc_Mult32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (result_mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xa & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDRegPair = result_mult32:8;
	if (sext(dmtDstDRegPair) == result_mult32) goto <end_strunc_Mult32>;
	dmtDstDRegPair = (0x1 << 0x3f);
	if (result_mult32 s< 0x0) goto <end_strunc_Mult32>;
	dmtDstDRegPair = ((0x1 << 0x3f) - 0x1);
<end_strunc_Mult32>
}

Dsp32Mult:^"Mult32" dmtDstDRegPair" = "dmtSrc0DReg" * "dmtSrc1DReg" (M, IS, NS)"
	is dmtSigDsp=0xc & dmtSig=0x1 & dmtMmod=0xb & dmtMm=0x1 & dmtP=0x1 & dmtW1=0x0 & dmtOp1=0x1 
	 ; dmtW0=0x1 & dmtOp0=0x0 & dmtDstDRegPair & dmtSrc0DReg & dmtSrc1DReg 
{
	local result_mult32:9 = zext(dmtSrc0DReg) * sext(dmtSrc1DReg);
	dmtDstDRegPair = result_mult32:8;
}



:^Dsp32Mult is dmtM=0x0 ... & Dsp32Mult { build Dsp32Mult; }
:^Dsp32Mult is dmtM=0x1 ... & Dsp32Mult { build Dsp32Mult; delayslot(4); }
