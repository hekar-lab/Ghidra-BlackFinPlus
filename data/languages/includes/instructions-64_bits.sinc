######################################################################
########>--------        64 bits instructions        --------<########
######################################################################


## Jump/Call to 32-bit Immediate (Jump32)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 1 | 0 | 1 | 1 | 1 |.c.| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |rel|
## |.imm...........................................................|
## |.imm...........................................................|
## | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

jmpImm:  addr is jmpImmH ; jmpImmL [addr = inst_start + (jmpImmH << 16 + jmpImmL);]{ export *[ram]:4 addr; }
jmpImmA: addr is jmpImmH ; jmpImmL [addr = jmpImmH << 16 + jmpImmL;]{ export *[ram]:4 addr; }

with : (opcode06=0x37 & jmpOpcode=0x0) ... {
:JumpAbs "jump.a" jmpImmA is jmpC=0x0 & jmpRel=0x0 ; jmpImmA ; jmpZeros=0x0 {}
:JumpAbs "jump" jmpImm    is jmpC=0x0 & jmpRel=0x1 ; jmpImm ; jmpZeros=0x0 {}

:Call "call.a" jmpImmA is jmpC=0x1 & jmpRel=0x0 ; jmpImmA ; jmpZeros=0x0 {}
:Call "call" jmpImm    is jmpC=0x1 & jmpRel=0x1 ; jmpImm ; jmpZeros=0x0 {}
}


## Load Immediate Word (LdImm)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 1 | 0 | 1 | 1 | 0 | 1 | 0 | 0 | 0 |.grp.......|.reg.......|
## |.imm...........................................................|
## |.imm...........................................................|
## |.dummy.........................................................|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

ldiImm: imm is ldiImmH ; ldiImmL [imm = ldiImmH << 16 + ldiImmL;] {}

with : opcode10=0x368 ... {
:LdImmToReg ldiDReg = ldiImm    is ldiGrp=0x0 & ldiDReg ; ldiImm ; ldiDummy {}
:LdImmToReg ldiPReg = ldiImm    is ldiGrp=0x1 & ldiPReg ; ldiImm ; ldiDummy {}
:LdImmToReg ldiIReg = ldiImm    is ldiGrp=0x2 & ldiReg1=0x0 & ldiIReg ; ldiImm ; ldiDummy {}
:LdImmToReg ldiMReg = ldiImm    is ldiGrp=0x2 & ldiReg1=0x1 & ldiMReg ; ldiImm ; ldiDummy {}
:LdImmToReg ldiBReg = ldiImm    is ldiGrp=0x3 & ldiReg1=0x0 & ldiBReg ; ldiImm ; ldiDummy {}
:LdImmToReg ldiLReg = ldiImm    is ldiGrp=0x3 & ldiReg1=0x1 & ldiLReg ; ldiImm ; ldiDummy {}
:LdImmToAxX "A0.X" = ldiImm     is ldiGrp=0x4 & ldiReg=0x0 ; ldiImm ; ldiDummy {}
:LdImmToAxW "A0.W" = ldiImm     is ldiGrp=0x4 & ldiReg=0x1 ; ldiImm ; ldiDummy {}
:LdImmToAxX "A1.X" = ldiImm     is ldiGrp=0x4 & ldiReg=0x2 ; ldiImm ; ldiDummy {}
:LdImmToAxW "A1.W" = ldiImm     is ldiGrp=0x4 & ldiReg=0x3 ; ldiImm ; ldiDummy {}
:LdImmToReg "ASTAT" = ldiImm    is ldiGrp=0x4 & ldiReg=0x6 ; ldiImm ; ldiDummy {}
:LdImmToReg "RETS" = ldiImm     is ldiGrp=0x4 & ldiReg=0x7 ; ldiImm ; ldiDummy {}
:LdImmToReg ldiSysReg2 = ldiImm is ldiGrp=0x6 & ldiSysReg2 ; ldiImm ; ldiDummy {}
:LdImmToReg ldiSysReg3 = ldiImm is ldiGrp=0x7 & ldiSysReg3 ; ldiImm ; ldiDummy {}
}


## Load/Store 32-bit Absolute Address (LdStAbs)
##
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+
## | 1 | 1 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
## |.imm...........................................................|
## |.imm...........................................................|
## | 0 | 0 | 0 | 0 |.sz....|.w.| 0 | 0 |.z.| 0 | 0 | 0 |.reg.......|
## +---+---+---+---|---+---+---+---|---+---+---+---|---+---+---+---+

lsaImm: imm is lsaImmH ; lsaImmL [imm = lsaImmH << 16 + lsaImmL;] {}

with : opcode16=0xd800 ... {
with : ... lsaW=0x0 {
:LdM32bitToDreg  lsaDReg = [lsaImm]           is any16 ; lsaImm ; lsaSz=0x0 & lsaZ=0x0 & lsaDReg {}
:LdM32bitToDreg  lsaPReg = [lsaImm]           is any16 ; lsaImm ; lsaSz=0x0 & lsaZ=0x1 & lsaPReg {}
:LdM16bitToDreg  lsaDReg = "W" [lsaImm] "(Z)" is any16 ; lsaImm ; lsaSz=0x1 & lsaZ=0x0 & lsaDReg {}
:LdM16bitToDreg  lsaPReg = "W" [lsaImm] "(X)" is any16 ; lsaImm ; lsaSz=0x1 & lsaZ=0x1 & lsaPReg {}
:LdM08bitToDreg  lsaDReg = "B" [lsaImm] "(Z)" is any16 ; lsaImm ; lsaSz=0x2 & lsaZ=0x0 & lsaDReg {}
:LdM08bitToDreg  lsaPReg = "B" [lsaImm] "(X)" is any16 ; lsaImm ; lsaSz=0x2 & lsaZ=0x1 & lsaPReg {}
:LdM16bitToDregL lsaDRegL = "W" [lsaImm]      is any16 ; lsaImm ; lsaSz=0x3 & lsaZ=0x0 & lsaDRegL {}
:LdM16bitToDregH lsaDRegH = "W" [lsaImm]      is any16 ; lsaImm ; lsaSz=0x3 & lsaZ=0x1 & lsaDRegH {}
}

with : ... lsaW=0x1 {
:StDregToM32bit  [lsaImm] = lsaDReg           is any16 ; lsaImm ; lsaSz=0x0 & lsaZ=0x0 & lsaDReg {}
:StDregToM32bit  [lsaImm] = lsaPReg           is any16 ; lsaImm ; lsaSz=0x0 & lsaZ=0x1 & lsaPReg {}
:StDregToM16bit  "W" [lsaImm] = lsaDReg       is any16 ; lsaImm ; lsaSz=0x1 & lsaZ=0x0 & lsaDReg {}
:StDregToM08bit  "B" [lsaImm] = lsaPReg       is any16 ; lsaImm ; lsaSz=0x2 & lsaZ=0x0 & lsaPReg {}
:StDregHToM16bit "W" [lsaImm] = lsaDRegH      is any16 ; lsaImm ; lsaSz=0x3 & lsaZ=0x1 & lsaDRegH {}
}
}